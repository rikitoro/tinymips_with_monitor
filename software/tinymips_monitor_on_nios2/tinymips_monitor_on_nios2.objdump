
tinymips_monitor_on_nios2.elf:     file format elf32-littlenios2
tinymips_monitor_on_nios2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x000013b0 memsz 0x000013b0 flags r-x
    LOAD off    0x000023d0 vaddr 0x000093d0 paddr 0x0000944c align 2**12
         filesz 0x0000007c memsz 0x0000007c flags rw-
    LOAD off    0x000024c8 vaddr 0x000094c8 paddr 0x000094c8 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  0000244c  2**0
                  CONTENTS
  2 .text         00001324  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000008c  00009344  00009344  00002344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000007c  000093d0  0000944c  000023d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  000094c8  000094c8  000024c8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  000094d8  000094d8  0000244c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000244c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000380  00000000  00000000  00002470  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00003327  00000000  00000000  000027f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001533  00000000  00000000  00005b17  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000144b  00000000  00000000  0000704a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000008c0  00000000  00000000  00008498  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000f2b  00000000  00000000  00008d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000fa3  00000000  00000000  00009c83  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000ac28  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000c8  00000000  00000000  0000ac38  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000c5a5  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000f  00000000  00000000  0000c5a8  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000c5b7  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000c5b8  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0000c5b9  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0000c5bd  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0000c5c1  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0000c5c5  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000004  00000000  00000000  0000c5d0  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000004  00000000  00000000  0000c5d4  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000007  00000000  00000000  0000c5d8  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000039  00000000  00000000  0000c5df  2**0
                  CONTENTS, READONLY
 29 .jdi          000044b9  00000000  00000000  0000c618  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0008a9b9  00000000  00000000  00010ad1  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
00009344 l    d  .rodata	00000000 .rodata
000093d0 l    d  .rwdata	00000000 .rwdata
000094c8 l    d  .bss	00000000 .bss
000094d8 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../tinymips_monitor_on_nios2_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 memory_data.c
00000000 l    df *ABS*	00000000 dmem.c
00000000 l    df *ABS*	00000000 imem.c
00000000 l    df *ABS*	00000000 ioport.c
00000000 l    df *ABS*	00000000 prg_mode.c
00000000 l    df *ABS*	00000000 rst.c
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 hexchar_int.c
000093aa l     O .rodata	00000017 CSWTCH.1
0000939a l     O .rodata	00000010 CSWTCH.5
00000000 l    df *ABS*	00000000 hexformat.c
00000000 l    df *ABS*	00000000 monitor_command.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00009314 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 strlen.c
00008fb8 g     F .text	0000002c alt_main
00008954 g     F .text	0000000c negate_dmem_we
0000944c g       *ABS*	00000000 __flash_rwdata_start
00008a0c g     F .text	00000030 imem_wd
00008ab4 g     F .text	0000007c getstr
00008a6c g     F .text	0000000c oport_rd
00008b68 g     F .text	00000074 hex2chars_to_int
00008614 g     F .text	00000094 convert_hexformat_to_memory_data
000080b0 g     F .text	0000001c do_NP
00009428 g     O .rwdata	00000004 EOF
00009198 g     F .text	00000038 alt_putstr
00009320 g     F .text	00000008 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00008960 g     F .text	00000010 assert_dmem_clk
00008ca8 g     F .text	00000018 address_of_hexformat
00008c98 g     F .text	00000010 bytecount_of_hexformat
00008000 g     F .entry	0000000c __reset
00008c74 g     F .text	00000024 hex_nth_digit
00008b30 g     F .text	00000004 putstr
00008a94 g     F .text	00000010 assert_rst
00008020 g       *ABS*	00000000 __flash_exceptions_start
000094d4 g     O .bss	00000004 errno
000089e4 g     F .text	0000000c negate_imem_we
000094cc g     O .bss	00000004 alt_argv
00011428 g       *ABS*	00000000 _gp
000093d0 g     O .rwdata	00000030 alt_fd_list
00008104 g     F .text	0000002c do_WI
0000855c g     F .text	00000008 write_memory_data_to_iport_data
00008aa4 g     F .text	0000000c negate_rst
00009434 g     O .rwdata	00000004 alt_max_fd
00008598 g     F .text	0000007c checksum_of_memory_data
000094d8 g       *ABS*	00000000 __bss_end
00008e7c g     F .text	00000044 alt_getchar
000081c0 g     F .text	00000038 do_OP
000089f0 g     F .text	00000010 assert_imem_clk
00008d64 g     F .text	0000003c checksum_of_hexformat
00008474 g     F .text	00000074 write_memory_data_to_dmem
00008a00 g     F .text	0000000c negate_imem_clk
00009400 g     O .rwdata	00000028 alt_dev_null
000081f8 g     F .text	00000008 do_Nothing
00009310 g     F .text	00000004 alt_dcache_flush_all
0000944c g       *ABS*	00000000 __ram_rwdata_end
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory
00009438 g     O .rwdata	00000008 alt_dev_list
000093d0 g       *ABS*	00000000 __ram_rodata_end
00009430 g     O .rwdata	00000004 jtag_uart_0
000094d8 g       *ABS*	00000000 end
00009280 g     F .text	00000090 altera_avalon_uart_write
00008094 g     F .text	0000001c do_AP
0000a000 g       *ABS*	00000000 __alt_stack_pointer
000088d4 g     F .text	00000070 convert_shorthexformat_to_memory_data
00008a88 g     F .text	0000000c negate_prg_mode
00008fe4 g     F .text	0000016c alt_printf
00008020 g     F .text	0000003c _start
000091f0 g     F .text	00000004 alt_sys_init
000093d0 g       *ABS*	00000000 __ram_rwdata_start
00009344 g       *ABS*	00000000 __ram_rodata_start
0000838c g     F .text	00000074 write_memory_data_to_imem
00008564 g     F .text	00000034 read_oport_data_for_memory_data
000094d8 g       *ABS*	00000000 __alt_stack_base
00008b34 g     F .text	00000004 tx_str
00008130 g     F .text	00000038 do_RD
00008944 g     F .text	00000010 assert_dmem_we
00008cc0 g     F .text	00000010 recordtype_of_hexformat
000086a8 g     F .text	0000022c convert_memory_data_to_hexformat
00008078 g     F .text	0000001c do_NR
00008b3c g     F .text	0000002c hexchar_to_int
000094c8 g       *ABS*	00000000 __bss_start
00008970 g     F .text	0000000c negate_dmem_clk
000082a8 g     F .text	000000e4 main
000094c8 g     O .bss	00000004 alt_envp
000089d4 g     F .text	00000010 assert_imem_we
000084e8 g     F .text	00000074 read_dmem_for_memory_data
00008ab0 g     F .text	00000004 getchar
000089b0 g     F .text	00000024 dmem_rd
00009448 g     O .rwdata	00000004 alt_errno
00008bdc g     F .text	00000098 hex4chars_to_int
00008200 g     F .text	000000a8 pp_memory_data
00009344 g       *ABS*	00000000 __flash_rodata_start
00008a78 g     F .text	00000010 assert_prg_mode
000091d0 g     F .text	00000020 alt_irq_init
00008b38 g     F .text	00000004 rx_str
000094d0 g     O .bss	00000004 alt_argc
0000897c g     F .text	00000034 dmem_wd
000080cc g     F .text	00000038 do_RI
00008a60 g     F .text	0000000c iport_wd
00009440 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
0000944c g       *ABS*	00000000 _edata
000094d8 g       *ABS*	00000000 _end
00008e58 g     F .text	00000024 unique
00008020 g       *ABS*	00000000 __ram_exceptions_end
00008cd0 g     F .text	00000094 data_of_hexformat
0000a000 g       *ABS*	00000000 __alt_data_end
0000942c g     O .rwdata	00000004 uart
0000800c g       .entry	00000000 _exit
00008a3c g     F .text	00000024 imem_rd
00009328 g     F .text	0000001c strlen
00009150 g     F .text	00000048 alt_putchar
00008400 g     F .text	00000074 read_imem_for_memory_data
00008194 g     F .text	0000002c do_IP
0000931c g     F .text	00000004 alt_icache_flush_all
000091f4 g     F .text	0000008c altera_avalon_uart_read
0000805c g     F .text	0000001c do_AR
00008168 g     F .text	0000002c do_WD
00008da0 g     F .text	000000b8 monitor_command
00008ec0 g     F .text	000000f8 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at

0000800c <_exit>:
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	dee80014 	ori	sp,sp,40960
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d6850a14 	ori	gp,gp,5160
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a53214 	ori	r2,r2,38088

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e53614 	ori	r3,r3,38104

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_gp+0xffff6c1c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	0008ec00 	call	8ec0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	0008fb80 	call	8fb8 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <_gp+0xffff6c30>

0000805c <do_AR>:
  }
}

///////////////////

void do_AR() {
    805c:	deffff04 	addi	sp,sp,-4
    8060:	dfc00015 	stw	ra,0(sp)
  assert_rst();
    8064:	0008a940 	call	8a94 <assert_rst>
  tx_str(EOF);
    8068:	d1200017 	ldw	r4,-32768(gp)
}
    806c:	dfc00017 	ldw	ra,0(sp)
    8070:	dec00104 	addi	sp,sp,4

///////////////////

void do_AR() {
  assert_rst();
  tx_str(EOF);
    8074:	0008b341 	jmpi	8b34 <tx_str>

00008078 <do_NR>:
}

void do_NR() {
    8078:	deffff04 	addi	sp,sp,-4
    807c:	dfc00015 	stw	ra,0(sp)
  negate_rst();
    8080:	0008aa40 	call	8aa4 <negate_rst>
  tx_str(EOF);
    8084:	d1200017 	ldw	r4,-32768(gp)
}
    8088:	dfc00017 	ldw	ra,0(sp)
    808c:	dec00104 	addi	sp,sp,4
  tx_str(EOF);
}

void do_NR() {
  negate_rst();
  tx_str(EOF);
    8090:	0008b341 	jmpi	8b34 <tx_str>

00008094 <do_AP>:
}

void do_AP() {
    8094:	deffff04 	addi	sp,sp,-4
    8098:	dfc00015 	stw	ra,0(sp)
  assert_prg_mode();
    809c:	0008a780 	call	8a78 <assert_prg_mode>
  tx_str(EOF);
    80a0:	d1200017 	ldw	r4,-32768(gp)
}
    80a4:	dfc00017 	ldw	ra,0(sp)
    80a8:	dec00104 	addi	sp,sp,4
  tx_str(EOF);
}

void do_AP() {
  assert_prg_mode();
  tx_str(EOF);
    80ac:	0008b341 	jmpi	8b34 <tx_str>

000080b0 <do_NP>:
}

void do_NP() {
    80b0:	deffff04 	addi	sp,sp,-4
    80b4:	dfc00015 	stw	ra,0(sp)
  negate_prg_mode();
    80b8:	0008a880 	call	8a88 <negate_prg_mode>
  tx_str(EOF);
    80bc:	d1200017 	ldw	r4,-32768(gp)
}
    80c0:	dfc00017 	ldw	ra,0(sp)
    80c4:	dec00104 	addi	sp,sp,4
  tx_str(EOF);
}

void do_NP() {
  negate_prg_mode();
  tx_str(EOF);
    80c8:	0008b341 	jmpi	8b34 <tx_str>

000080cc <do_RI>:
}

void do_RI(const char* hf) {
    80cc:	deff3a04 	addi	sp,sp,-792
  MemoryData md;
  char s_msg[522];

  convert_shorthexformat_to_memory_data(hf, &md);
    80d0:	d9408304 	addi	r5,sp,524
void do_NP() {
  negate_prg_mode();
  tx_str(EOF);
}

void do_RI(const char* hf) {
    80d4:	dfc0c515 	stw	ra,788(sp)
  MemoryData md;
  char s_msg[522];

  convert_shorthexformat_to_memory_data(hf, &md);
    80d8:	00088d40 	call	88d4 <convert_shorthexformat_to_memory_data>
  read_imem_for_memory_data(&md);
    80dc:	d9008304 	addi	r4,sp,524
    80e0:	00084000 	call	8400 <read_imem_for_memory_data>
  convert_memory_data_to_hexformat(&md, s_msg);
    80e4:	d9008304 	addi	r4,sp,524
    80e8:	d80b883a 	mov	r5,sp
    80ec:	00086a80 	call	86a8 <convert_memory_data_to_hexformat>
  tx_str(s_msg);
    80f0:	d809883a 	mov	r4,sp
    80f4:	0008b340 	call	8b34 <tx_str>
}
    80f8:	dfc0c517 	ldw	ra,788(sp)
    80fc:	dec0c604 	addi	sp,sp,792
    8100:	f800283a 	ret

00008104 <do_WI>:

void do_WI(const char* hf) {
    8104:	deffbd04 	addi	sp,sp,-268
  MemoryData md;

  convert_hexformat_to_memory_data(hf, &md);
    8108:	d80b883a 	mov	r5,sp
  read_imem_for_memory_data(&md);
  convert_memory_data_to_hexformat(&md, s_msg);
  tx_str(s_msg);
}

void do_WI(const char* hf) {
    810c:	dfc04215 	stw	ra,264(sp)
  MemoryData md;

  convert_hexformat_to_memory_data(hf, &md);
    8110:	00086140 	call	8614 <convert_hexformat_to_memory_data>
  write_memory_data_to_imem(&md);
    8114:	d809883a 	mov	r4,sp
    8118:	000838c0 	call	838c <write_memory_data_to_imem>
  tx_str(EOF);
    811c:	d1200017 	ldw	r4,-32768(gp)
    8120:	0008b340 	call	8b34 <tx_str>
}
    8124:	dfc04217 	ldw	ra,264(sp)
    8128:	dec04304 	addi	sp,sp,268
    812c:	f800283a 	ret

00008130 <do_RD>:

void do_RD(const char* hf) {
    8130:	deff3a04 	addi	sp,sp,-792
  MemoryData md;
  char s_msg[522];

  convert_shorthexformat_to_memory_data(hf, &md);
    8134:	d9408304 	addi	r5,sp,524
  convert_hexformat_to_memory_data(hf, &md);
  write_memory_data_to_imem(&md);
  tx_str(EOF);
}

void do_RD(const char* hf) {
    8138:	dfc0c515 	stw	ra,788(sp)
  MemoryData md;
  char s_msg[522];

  convert_shorthexformat_to_memory_data(hf, &md);
    813c:	00088d40 	call	88d4 <convert_shorthexformat_to_memory_data>
  read_dmem_for_memory_data(&md);
    8140:	d9008304 	addi	r4,sp,524
    8144:	00084e80 	call	84e8 <read_dmem_for_memory_data>
  convert_memory_data_to_hexformat(&md, s_msg);
    8148:	d9008304 	addi	r4,sp,524
    814c:	d80b883a 	mov	r5,sp
    8150:	00086a80 	call	86a8 <convert_memory_data_to_hexformat>
  tx_str(s_msg);
    8154:	d809883a 	mov	r4,sp
    8158:	0008b340 	call	8b34 <tx_str>
}
    815c:	dfc0c517 	ldw	ra,788(sp)
    8160:	dec0c604 	addi	sp,sp,792
    8164:	f800283a 	ret

00008168 <do_WD>:

void do_WD(const char* hf) {
    8168:	deffbd04 	addi	sp,sp,-268
  MemoryData md;

  convert_hexformat_to_memory_data(hf, &md);
    816c:	d80b883a 	mov	r5,sp
  read_dmem_for_memory_data(&md);
  convert_memory_data_to_hexformat(&md, s_msg);
  tx_str(s_msg);
}

void do_WD(const char* hf) {
    8170:	dfc04215 	stw	ra,264(sp)
  MemoryData md;

  convert_hexformat_to_memory_data(hf, &md);
    8174:	00086140 	call	8614 <convert_hexformat_to_memory_data>
  write_memory_data_to_dmem(&md);
    8178:	d809883a 	mov	r4,sp
    817c:	00084740 	call	8474 <write_memory_data_to_dmem>
  tx_str(EOF);
    8180:	d1200017 	ldw	r4,-32768(gp)
    8184:	0008b340 	call	8b34 <tx_str>
}
    8188:	dfc04217 	ldw	ra,264(sp)
    818c:	dec04304 	addi	sp,sp,268
    8190:	f800283a 	ret

00008194 <do_IP>:

void do_IP(const char* hf) {
    8194:	deffbd04 	addi	sp,sp,-268
  MemoryData md;
  convert_hexformat_to_memory_data(hf, &md);
    8198:	d80b883a 	mov	r5,sp
  convert_hexformat_to_memory_data(hf, &md);
  write_memory_data_to_dmem(&md);
  tx_str(EOF);
}

void do_IP(const char* hf) {
    819c:	dfc04215 	stw	ra,264(sp)
  MemoryData md;
  convert_hexformat_to_memory_data(hf, &md);
    81a0:	00086140 	call	8614 <convert_hexformat_to_memory_data>
  write_memory_data_to_iport_data(&md);
    81a4:	d809883a 	mov	r4,sp
    81a8:	000855c0 	call	855c <write_memory_data_to_iport_data>
  tx_str(EOF);
    81ac:	d1200017 	ldw	r4,-32768(gp)
    81b0:	0008b340 	call	8b34 <tx_str>
}
    81b4:	dfc04217 	ldw	ra,264(sp)
    81b8:	dec04304 	addi	sp,sp,268
    81bc:	f800283a 	ret

000081c0 <do_OP>:

void do_OP(const char* hf) {
    81c0:	deff3a04 	addi	sp,sp,-792
  MemoryData md;
  char s_msg[522];
  convert_shorthexformat_to_memory_data(hf, &md);
    81c4:	d9408304 	addi	r5,sp,524
  convert_hexformat_to_memory_data(hf, &md);
  write_memory_data_to_iport_data(&md);
  tx_str(EOF);
}

void do_OP(const char* hf) {
    81c8:	dfc0c515 	stw	ra,788(sp)
  MemoryData md;
  char s_msg[522];
  convert_shorthexformat_to_memory_data(hf, &md);
    81cc:	00088d40 	call	88d4 <convert_shorthexformat_to_memory_data>
  read_oport_data_for_memory_data(&md);
    81d0:	d9008304 	addi	r4,sp,524
    81d4:	00085640 	call	8564 <read_oport_data_for_memory_data>
  convert_memory_data_to_hexformat(&md, s_msg);
    81d8:	d9008304 	addi	r4,sp,524
    81dc:	d80b883a 	mov	r5,sp
    81e0:	00086a80 	call	86a8 <convert_memory_data_to_hexformat>
  tx_str(s_msg);
    81e4:	d809883a 	mov	r4,sp
    81e8:	0008b340 	call	8b34 <tx_str>
}
    81ec:	dfc0c517 	ldw	ra,788(sp)
    81f0:	dec0c604 	addi	sp,sp,792
    81f4:	f800283a 	ret

000081f8 <do_Nothing>:

void do_Nothing() {
  tx_str(EOF);
    81f8:	d1200017 	ldw	r4,-32768(gp)
    81fc:	0008b341 	jmpi	8b34 <tx_str>

00008200 <pp_memory_data>:
}
//////////////////

void pp_memory_data(const MemoryData* md) {
    8200:	defffc04 	addi	sp,sp,-16
    8204:	dc000015 	stw	r16,0(sp)
    8208:	2021883a 	mov	r16,r4
  int i = 0;

  alt_printf("bytecount  = %x\r\n", md->bytecount);
    820c:	81400017 	ldw	r5,0(r16)
    8210:	01000074 	movhi	r4,1
    8214:	2124d104 	addi	r4,r4,-27836
void do_Nothing() {
  tx_str(EOF);
}
//////////////////

void pp_memory_data(const MemoryData* md) {
    8218:	dfc00315 	stw	ra,12(sp)
    821c:	dc800215 	stw	r18,8(sp)
    8220:	dc400115 	stw	r17,4(sp)
  int i = 0;

  alt_printf("bytecount  = %x\r\n", md->bytecount);
    8224:	0008fe40 	call	8fe4 <alt_printf>
  alt_printf("address    = %x\r\n", md->address);
    8228:	81400117 	ldw	r5,4(r16)
    822c:	01000074 	movhi	r4,1
    8230:	2124d604 	addi	r4,r4,-27816
    8234:	0008fe40 	call	8fe4 <alt_printf>
  alt_printf("recordtype = %x\r\n", md->recordtype);
    8238:	81400217 	ldw	r5,8(r16)
    823c:	01000074 	movhi	r4,1
    8240:	2124db04 	addi	r4,r4,-27796
    8244:	0008fe40 	call	8fe4 <alt_printf>
    8248:	84800304 	addi	r18,r16,12
  for ( i = 0; i < md->bytecount / 4; ++i) {
    824c:	0023883a 	mov	r17,zero
    8250:	80800017 	ldw	r2,0(r16)
    8254:	1000010e 	bge	r2,zero,825c <pp_memory_data+0x5c>
    8258:	108000c4 	addi	r2,r2,3
    825c:	1005d0ba 	srai	r2,r2,2
    8260:	88800b0e 	bge	r17,r2,8290 <pp_memory_data+0x90>
    alt_printf("%x : %x\r\n", md->address + i * 4, md->data[i]);
    8264:	80800117 	ldw	r2,4(r16)
    8268:	8c4b883a 	add	r5,r17,r17
    826c:	91800017 	ldw	r6,0(r18)
    8270:	294b883a 	add	r5,r5,r5
    8274:	01000074 	movhi	r4,1
    8278:	2124e004 	addi	r4,r4,-27776
    827c:	288b883a 	add	r5,r5,r2
    8280:	0008fe40 	call	8fe4 <alt_printf>
  int i = 0;

  alt_printf("bytecount  = %x\r\n", md->bytecount);
  alt_printf("address    = %x\r\n", md->address);
  alt_printf("recordtype = %x\r\n", md->recordtype);
  for ( i = 0; i < md->bytecount / 4; ++i) {
    8284:	8c400044 	addi	r17,r17,1
    8288:	94800104 	addi	r18,r18,4
    828c:	003ff006 	br	8250 <_gp+0xffff6e28>
    alt_printf("%x : %x\r\n", md->address + i * 4, md->data[i]);
  }
}
    8290:	dfc00317 	ldw	ra,12(sp)
    8294:	dc800217 	ldw	r18,8(sp)
    8298:	dc400117 	ldw	r17,4(sp)
    829c:	dc000017 	ldw	r16,0(sp)
    82a0:	dec00404 	addi	sp,sp,16
    82a4:	f800283a 	ret

000082a8 <main>:

int main()
{ 
  char r_msg[600];

  tx_str(EOF);
    82a8:	d1200017 	ldw	r4,-32768(gp)
///
void pp_memory_data(const MemoryData* md);
///

int main()
{ 
    82ac:	deff6704 	addi	sp,sp,-612
    82b0:	dc409715 	stw	r17,604(sp)
  tx_str(EOF);

  while (1) {
    rx_str(r_msg);

    switch (monitor_command(r_msg)) {
    82b4:	04400074 	movhi	r17,1
///
void pp_memory_data(const MemoryData* md);
///

int main()
{ 
    82b8:	dc009615 	stw	r16,600(sp)
    82bc:	dfc09815 	stw	ra,608(sp)
  tx_str(EOF);

  while (1) {
    rx_str(r_msg);

    switch (monitor_command(r_msg)) {
    82c0:	04000244 	movi	r16,9

int main()
{ 
  char r_msg[600];

  tx_str(EOF);
    82c4:	0008b340 	call	8b34 <tx_str>

  while (1) {
    rx_str(r_msg);

    switch (monitor_command(r_msg)) {
    82c8:	8c60bd04 	addi	r17,r17,-32012
  char r_msg[600];

  tx_str(EOF);

  while (1) {
    rx_str(r_msg);
    82cc:	d809883a 	mov	r4,sp
    82d0:	0008b380 	call	8b38 <rx_str>

    switch (monitor_command(r_msg)) {
    82d4:	d809883a 	mov	r4,sp
    82d8:	0008da00 	call	8da0 <monitor_command>
    82dc:	10bfffc4 	addi	r2,r2,-1
    82e0:	80802836 	bltu	r16,r2,8384 <main+0xdc>
    82e4:	100490ba 	slli	r2,r2,2
    82e8:	1445883a 	add	r2,r2,r17
    82ec:	10800017 	ldw	r2,0(r2)
    82f0:	1000683a 	jmp	r2
    82f4:	0000831c 	xori	zero,zero,524
    82f8:	00008324 	muli	zero,zero,524
    82fc:	0000832c 	andhi	zero,zero,524
    8300:	00008334 	movhi	zero,524
    8304:	0000833c 	xorhi	zero,zero,524
    8308:	00008348 	cmpgei	zero,zero,525
    830c:	00008354 	movui	zero,525
    8310:	00008360 	cmpeqi	zero,zero,525
    8314:	0000836c 	andhi	zero,zero,525
    8318:	00008378 	rdprs	zero,zero,525
      case MONITOR_COMMAND_AR:  // assert reset
        do_AR();          break;
    831c:	000805c0 	call	805c <do_AR>
    8320:	003fea06 	br	82cc <_gp+0xffff6ea4>
      case MONITOR_COMMAND_NR:  // negate reset
        do_NR();          break;
    8324:	00080780 	call	8078 <do_NR>
    8328:	003fe806 	br	82cc <_gp+0xffff6ea4>
      case MONITOR_COMMAND_AP:  // assert programming mode
        do_AP();          break;
    832c:	00080940 	call	8094 <do_AP>
    8330:	003fe606 	br	82cc <_gp+0xffff6ea4>
      case MONITOR_COMMAND_NP:  // negate programming mode
        do_NP();          break;
    8334:	00080b00 	call	80b0 <do_NP>
    8338:	003fe406 	br	82cc <_gp+0xffff6ea4>
      case MONITOR_COMMAND_RI:  // read instruction memory
        do_RI(&r_msg[2]); break;
    833c:	d9000084 	addi	r4,sp,2
    8340:	00080cc0 	call	80cc <do_RI>
    8344:	003fe106 	br	82cc <_gp+0xffff6ea4>
      case MONITOR_COMMAND_WI:  // write instruction memory
        do_WI(&r_msg[2]); break;
    8348:	d9000084 	addi	r4,sp,2
    834c:	00081040 	call	8104 <do_WI>
    8350:	003fde06 	br	82cc <_gp+0xffff6ea4>
      case MONITOR_COMMAND_RD:  // read data memory
        do_RD(&r_msg[2]); break;
    8354:	d9000084 	addi	r4,sp,2
    8358:	00081300 	call	8130 <do_RD>
    835c:	003fdb06 	br	82cc <_gp+0xffff6ea4>
      case MONITOR_COMMAND_WD:  // write data memory
        do_WD(&r_msg[2]); break;
    8360:	d9000084 	addi	r4,sp,2
    8364:	00081680 	call	8168 <do_WD>
    8368:	003fd806 	br	82cc <_gp+0xffff6ea4>
      case MONITOR_COMMAND_IP:  // set iport data
        do_IP(&r_msg[2]); break;
    836c:	d9000084 	addi	r4,sp,2
    8370:	00081940 	call	8194 <do_IP>
    8374:	003fd506 	br	82cc <_gp+0xffff6ea4>
      case MONITOR_COMMAND_OP:  // get oport data
        do_OP(&r_msg[2]); break;
    8378:	d9000084 	addi	r4,sp,2
    837c:	00081c00 	call	81c0 <do_OP>
    8380:	003fd206 	br	82cc <_gp+0xffff6ea4>
      default:
        do_Nothing(); break;
    8384:	00081f80 	call	81f8 <do_Nothing>
    8388:	003fd006 	br	82cc <_gp+0xffff6ea4>

0000838c <write_memory_data_to_imem>:
#include "memory_data.h"


//////////////
void write_memory_data_to_imem(const MemoryData* md) {
  const int word_count = md->bytecount / 4;
    838c:	20800017 	ldw	r2,0(r4)

#include "memory_data.h"


//////////////
void write_memory_data_to_imem(const MemoryData* md) {
    8390:	defffb04 	addi	sp,sp,-20
    8394:	dfc00415 	stw	ra,16(sp)
    8398:	dcc00315 	stw	r19,12(sp)
    839c:	dc800215 	stw	r18,8(sp)
    83a0:	dc400115 	stw	r17,4(sp)
    83a4:	dc000015 	stw	r16,0(sp)
  const int word_count = md->bytecount / 4;
    83a8:	1000010e 	bge	r2,zero,83b0 <write_memory_data_to_imem+0x24>
    83ac:	108000c4 	addi	r2,r2,3
    83b0:	1023d0ba 	srai	r17,r2,2
  const int start_address = md->address;
    83b4:	24c00117 	ldw	r19,4(r4)
    83b8:	24000304 	addi	r16,r4,12
  int count = 0;

  for (count = 0; count < word_count; ++count) {
    83bc:	0025883a 	mov	r18,zero
    83c0:	9440080e 	bge	r18,r17,83e4 <write_memory_data_to_imem+0x58>
    83c4:	9489883a 	add	r4,r18,r18
    imem_wd(start_address + 4 * count, md->data[count]);
    83c8:	81400017 	ldw	r5,0(r16)
    83cc:	2109883a 	add	r4,r4,r4
    83d0:	24c9883a 	add	r4,r4,r19
    83d4:	0008a0c0 	call	8a0c <imem_wd>
void write_memory_data_to_imem(const MemoryData* md) {
  const int word_count = md->bytecount / 4;
  const int start_address = md->address;
  int count = 0;

  for (count = 0; count < word_count; ++count) {
    83d8:	94800044 	addi	r18,r18,1
    83dc:	84000104 	addi	r16,r16,4
    83e0:	003ff706 	br	83c0 <_gp+0xffff6f98>
    imem_wd(start_address + 4 * count, md->data[count]);
  }
}
    83e4:	dfc00417 	ldw	ra,16(sp)
    83e8:	dcc00317 	ldw	r19,12(sp)
    83ec:	dc800217 	ldw	r18,8(sp)
    83f0:	dc400117 	ldw	r17,4(sp)
    83f4:	dc000017 	ldw	r16,0(sp)
    83f8:	dec00504 	addi	sp,sp,20
    83fc:	f800283a 	ret

00008400 <read_imem_for_memory_data>:

void read_imem_for_memory_data(MemoryData* md) {
  const int word_count = md->bytecount / 4;
    8400:	20800017 	ldw	r2,0(r4)
  for (count = 0; count < word_count; ++count) {
    imem_wd(start_address + 4 * count, md->data[count]);
  }
}

void read_imem_for_memory_data(MemoryData* md) {
    8404:	defffb04 	addi	sp,sp,-20
    8408:	dfc00415 	stw	ra,16(sp)
    840c:	dcc00315 	stw	r19,12(sp)
    8410:	dc800215 	stw	r18,8(sp)
    8414:	dc400115 	stw	r17,4(sp)
    8418:	dc000015 	stw	r16,0(sp)
  const int word_count = md->bytecount / 4;
    841c:	1000010e 	bge	r2,zero,8424 <read_imem_for_memory_data+0x24>
    8420:	108000c4 	addi	r2,r2,3
    8424:	1023d0ba 	srai	r17,r2,2
  const int start_address = md->address;
    8428:	24c00117 	ldw	r19,4(r4)
    842c:	24000304 	addi	r16,r4,12
  int count = 0;

  for (count = 0; count < word_count; ++count) {
    8430:	0025883a 	mov	r18,zero
    8434:	9440080e 	bge	r18,r17,8458 <read_imem_for_memory_data+0x58>
    8438:	9489883a 	add	r4,r18,r18
    843c:	2109883a 	add	r4,r4,r4
    md->data[count] = imem_rd(start_address + 4 * count);
    8440:	24c9883a 	add	r4,r4,r19
    8444:	0008a3c0 	call	8a3c <imem_rd>
    8448:	80800015 	stw	r2,0(r16)
void read_imem_for_memory_data(MemoryData* md) {
  const int word_count = md->bytecount / 4;
  const int start_address = md->address;
  int count = 0;

  for (count = 0; count < word_count; ++count) {
    844c:	94800044 	addi	r18,r18,1
    8450:	84000104 	addi	r16,r16,4
    8454:	003ff706 	br	8434 <_gp+0xffff700c>
    md->data[count] = imem_rd(start_address + 4 * count);
  }
}
    8458:	dfc00417 	ldw	ra,16(sp)
    845c:	dcc00317 	ldw	r19,12(sp)
    8460:	dc800217 	ldw	r18,8(sp)
    8464:	dc400117 	ldw	r17,4(sp)
    8468:	dc000017 	ldw	r16,0(sp)
    846c:	dec00504 	addi	sp,sp,20
    8470:	f800283a 	ret

00008474 <write_memory_data_to_dmem>:

//////////////
void write_memory_data_to_dmem(const MemoryData* md) {
  const int word_count = md->bytecount / 4;
    8474:	20800017 	ldw	r2,0(r4)
    md->data[count] = imem_rd(start_address + 4 * count);
  }
}

//////////////
void write_memory_data_to_dmem(const MemoryData* md) {
    8478:	defffb04 	addi	sp,sp,-20
    847c:	dfc00415 	stw	ra,16(sp)
    8480:	dcc00315 	stw	r19,12(sp)
    8484:	dc800215 	stw	r18,8(sp)
    8488:	dc400115 	stw	r17,4(sp)
    848c:	dc000015 	stw	r16,0(sp)
  const int word_count = md->bytecount / 4;
    8490:	1000010e 	bge	r2,zero,8498 <write_memory_data_to_dmem+0x24>
    8494:	108000c4 	addi	r2,r2,3
    8498:	1023d0ba 	srai	r17,r2,2
  const int start_address = md->address;
    849c:	24c00117 	ldw	r19,4(r4)
    84a0:	24000304 	addi	r16,r4,12
  int count = 0;

  for (count = 0; count < word_count; ++count) {
    84a4:	0025883a 	mov	r18,zero
    84a8:	9440080e 	bge	r18,r17,84cc <write_memory_data_to_dmem+0x58>
    84ac:	9489883a 	add	r4,r18,r18
    dmem_wd(start_address + 4 * count, md->data[count]);
    84b0:	81400017 	ldw	r5,0(r16)
    84b4:	2109883a 	add	r4,r4,r4
    84b8:	24c9883a 	add	r4,r4,r19
    84bc:	000897c0 	call	897c <dmem_wd>
void write_memory_data_to_dmem(const MemoryData* md) {
  const int word_count = md->bytecount / 4;
  const int start_address = md->address;
  int count = 0;

  for (count = 0; count < word_count; ++count) {
    84c0:	94800044 	addi	r18,r18,1
    84c4:	84000104 	addi	r16,r16,4
    84c8:	003ff706 	br	84a8 <_gp+0xffff7080>
    dmem_wd(start_address + 4 * count, md->data[count]);
  }
}
    84cc:	dfc00417 	ldw	ra,16(sp)
    84d0:	dcc00317 	ldw	r19,12(sp)
    84d4:	dc800217 	ldw	r18,8(sp)
    84d8:	dc400117 	ldw	r17,4(sp)
    84dc:	dc000017 	ldw	r16,0(sp)
    84e0:	dec00504 	addi	sp,sp,20
    84e4:	f800283a 	ret

000084e8 <read_dmem_for_memory_data>:

void read_dmem_for_memory_data(MemoryData* md) {
  const int word_count = md->bytecount / 4;
    84e8:	20800017 	ldw	r2,0(r4)
  for (count = 0; count < word_count; ++count) {
    dmem_wd(start_address + 4 * count, md->data[count]);
  }
}

void read_dmem_for_memory_data(MemoryData* md) {
    84ec:	defffb04 	addi	sp,sp,-20
    84f0:	dfc00415 	stw	ra,16(sp)
    84f4:	dcc00315 	stw	r19,12(sp)
    84f8:	dc800215 	stw	r18,8(sp)
    84fc:	dc400115 	stw	r17,4(sp)
    8500:	dc000015 	stw	r16,0(sp)
  const int word_count = md->bytecount / 4;
    8504:	1000010e 	bge	r2,zero,850c <read_dmem_for_memory_data+0x24>
    8508:	108000c4 	addi	r2,r2,3
    850c:	1023d0ba 	srai	r17,r2,2
  const int start_address = md->address;
    8510:	24c00117 	ldw	r19,4(r4)
    8514:	24000304 	addi	r16,r4,12
  int count = 0;

  for (count = 0; count < word_count; ++count) {
    8518:	0025883a 	mov	r18,zero
    851c:	9440080e 	bge	r18,r17,8540 <read_dmem_for_memory_data+0x58>
    8520:	9489883a 	add	r4,r18,r18
    8524:	2109883a 	add	r4,r4,r4
    md->data[count] = dmem_rd(start_address + 4 * count);
    8528:	24c9883a 	add	r4,r4,r19
    852c:	00089b00 	call	89b0 <dmem_rd>
    8530:	80800015 	stw	r2,0(r16)
void read_dmem_for_memory_data(MemoryData* md) {
  const int word_count = md->bytecount / 4;
  const int start_address = md->address;
  int count = 0;

  for (count = 0; count < word_count; ++count) {
    8534:	94800044 	addi	r18,r18,1
    8538:	84000104 	addi	r16,r16,4
    853c:	003ff706 	br	851c <_gp+0xffff70f4>
    md->data[count] = dmem_rd(start_address + 4 * count);
  }
}
    8540:	dfc00417 	ldw	ra,16(sp)
    8544:	dcc00317 	ldw	r19,12(sp)
    8548:	dc800217 	ldw	r18,8(sp)
    854c:	dc400117 	ldw	r17,4(sp)
    8550:	dc000017 	ldw	r16,0(sp)
    8554:	dec00504 	addi	sp,sp,20
    8558:	f800283a 	ret

0000855c <write_memory_data_to_iport_data>:

// ioport access
void write_memory_data_to_iport_data(const MemoryData* md) {
  iport_wd(md->data[0]);
    855c:	21000317 	ldw	r4,12(r4)
    8560:	0008a601 	jmpi	8a60 <iport_wd>

00008564 <read_oport_data_for_memory_data>:

void read_oport_data_for_memory_data(MemoryData* md) {
  const int bytecount = 4;
  const int address = 0;

  md->bytecount = bytecount;
    8564:	00800104 	movi	r2,4
// ioport access
void write_memory_data_to_iport_data(const MemoryData* md) {
  iport_wd(md->data[0]);
}

void read_oport_data_for_memory_data(MemoryData* md) {
    8568:	defffe04 	addi	sp,sp,-8
  const int bytecount = 4;
  const int address = 0;

  md->bytecount = bytecount;
    856c:	20800015 	stw	r2,0(r4)
  md->address = address;
    8570:	20000115 	stw	zero,4(r4)
// ioport access
void write_memory_data_to_iport_data(const MemoryData* md) {
  iport_wd(md->data[0]);
}

void read_oport_data_for_memory_data(MemoryData* md) {
    8574:	dc000015 	stw	r16,0(sp)
    8578:	dfc00115 	stw	ra,4(sp)
    857c:	2021883a 	mov	r16,r4
  const int bytecount = 4;
  const int address = 0;

  md->bytecount = bytecount;
  md->address = address;
  md->data[0] = oport_rd();
    8580:	0008a6c0 	call	8a6c <oport_rd>
    8584:	80800315 	stw	r2,12(r16)
}
    8588:	dfc00117 	ldw	ra,4(sp)
    858c:	dc000017 	ldw	r16,0(sp)
    8590:	dec00204 	addi	sp,sp,8
    8594:	f800283a 	ret

00008598 <checksum_of_memory_data>:


//////////////

char checksum_of_memory_data(const MemoryData* md) {
  const int word_count = md->bytecount / 4;
    8598:	20800017 	ldw	r2,0(r4)
    859c:	1007883a 	mov	r3,r2
    85a0:	1000010e 	bge	r2,zero,85a8 <checksum_of_memory_data+0x10>
    85a4:	10c000c4 	addi	r3,r2,3
    85a8:	180dd0ba 	srai	r6,r3,2
  int count = 0;
  char sum = 0;
  sum += (char)(0xff & md->bytecount);
  sum += (char)(0x00ff & md->address);
    85ac:	20c00117 	ldw	r3,4(r4)
  sum += (char)((0xff00 & md->address) >> 8);
  sum += (0xf & md->recordtype);
    85b0:	21400217 	ldw	r5,8(r4)
  for (count = 0; count < word_count; ++count) {
    85b4:	000f883a 	mov	r7,zero
    85b8:	1885883a 	add	r2,r3,r2
  const int word_count = md->bytecount / 4;
  int count = 0;
  char sum = 0;
  sum += (char)(0xff & md->bytecount);
  sum += (char)(0x00ff & md->address);
  sum += (char)((0xff00 & md->address) >> 8);
    85bc:	18ffc00c 	andi	r3,r3,65280
    85c0:	1807d23a 	srai	r3,r3,8
  sum += (0xf & md->recordtype);
    85c4:	294003cc 	andi	r5,r5,15
    85c8:	1145883a 	add	r2,r2,r5
    85cc:	10c5883a 	add	r2,r2,r3
    85d0:	21000304 	addi	r4,r4,12
  for (count = 0; count < word_count; ++count) {
    85d4:	39800d0e 	bge	r7,r6,860c <checksum_of_memory_data+0x74>
    sum += (char)( 0x000000ff & md->data[count]);
    85d8:	21400017 	ldw	r5,0(r4)
  char sum = 0;
  sum += (char)(0xff & md->bytecount);
  sum += (char)(0x00ff & md->address);
  sum += (char)((0xff00 & md->address) >> 8);
  sum += (0xf & md->recordtype);
  for (count = 0; count < word_count; ++count) {
    85dc:	39c00044 	addi	r7,r7,1
    85e0:	21000104 	addi	r4,r4,4
    sum += (char)( 0x000000ff & md->data[count]);
    sum += (char)((0x0000ff00 & md->data[count]) >> 8);
    85e4:	28ffc00c 	andi	r3,r5,65280
    85e8:	1807d23a 	srai	r3,r3,8
  sum += (char)(0xff & md->bytecount);
  sum += (char)(0x00ff & md->address);
  sum += (char)((0xff00 & md->address) >> 8);
  sum += (0xf & md->recordtype);
  for (count = 0; count < word_count; ++count) {
    sum += (char)( 0x000000ff & md->data[count]);
    85ec:	2885883a 	add	r2,r5,r2
    sum += (char)((0x0000ff00 & md->data[count]) >> 8);
    85f0:	10c5883a 	add	r2,r2,r3
    sum += (char)((0x00ff0000 & md->data[count]) >> 16);
    85f4:	28c03fec 	andhi	r3,r5,255
    85f8:	1807d43a 	srai	r3,r3,16
    85fc:	10c7883a 	add	r3,r2,r3
    sum += (char)((0xff000000 & md->data[count]) >> 24);
    8600:	2804d63a 	srli	r2,r5,24
    8604:	1885883a 	add	r2,r3,r2
    8608:	003ff206 	br	85d4 <_gp+0xffff71ac>
  }
  return (char)(0xff & (~sum + 1));
}
    860c:	0085c83a 	sub	r2,zero,r2
    8610:	f800283a 	ret

00008614 <convert_hexformat_to_memory_data>:

///////////////////

void convert_hexformat_to_memory_data(const char* hf, MemoryData* md) {
    8614:	defffb04 	addi	sp,sp,-20
    8618:	dfc00415 	stw	ra,16(sp)
    861c:	dcc00315 	stw	r19,12(sp)
    8620:	dc800215 	stw	r18,8(sp)
    8624:	2027883a 	mov	r19,r4
    8628:	dc400115 	stw	r17,4(sp)
    862c:	dc000015 	stw	r16,0(sp)
    8630:	2821883a 	mov	r16,r5
  int i;

  md->bytecount  = bytecount_of_hexformat(hf);
    8634:	0008c980 	call	8c98 <bytecount_of_hexformat>
  md->address    = address_of_hexformat(hf);
    8638:	9809883a 	mov	r4,r19
///////////////////

void convert_hexformat_to_memory_data(const char* hf, MemoryData* md) {
  int i;

  md->bytecount  = bytecount_of_hexformat(hf);
    863c:	80800015 	stw	r2,0(r16)
  md->address    = address_of_hexformat(hf);
    8640:	0008ca80 	call	8ca8 <address_of_hexformat>
    8644:	80800115 	stw	r2,4(r16)
  md->recordtype = recordtype_of_hexformat(hf);
    8648:	9809883a 	mov	r4,r19
    864c:	0008cc00 	call	8cc0 <recordtype_of_hexformat>
    8650:	80800215 	stw	r2,8(r16)
    8654:	84800304 	addi	r18,r16,12
  for (i = 0; i < md->bytecount / 4; ++i) {
    8658:	0023883a 	mov	r17,zero
    865c:	80800017 	ldw	r2,0(r16)
    8660:	1000010e 	bge	r2,zero,8668 <convert_hexformat_to_memory_data+0x54>
    8664:	108000c4 	addi	r2,r2,3
    8668:	1005d0ba 	srai	r2,r2,2
    866c:	8880070e 	bge	r17,r2,868c <convert_hexformat_to_memory_data+0x78>
    md->data[i] = data_of_hexformat(hf, i);
    8670:	880b883a 	mov	r5,r17
    8674:	9809883a 	mov	r4,r19
    8678:	0008cd00 	call	8cd0 <data_of_hexformat>
    867c:	90800015 	stw	r2,0(r18)
  int i;

  md->bytecount  = bytecount_of_hexformat(hf);
  md->address    = address_of_hexformat(hf);
  md->recordtype = recordtype_of_hexformat(hf);
  for (i = 0; i < md->bytecount / 4; ++i) {
    8680:	8c400044 	addi	r17,r17,1
    8684:	94800104 	addi	r18,r18,4
    8688:	003ff406 	br	865c <_gp+0xffff7234>
    md->data[i] = data_of_hexformat(hf, i);
  }
}
    868c:	dfc00417 	ldw	ra,16(sp)
    8690:	dcc00317 	ldw	r19,12(sp)
    8694:	dc800217 	ldw	r18,8(sp)
    8698:	dc400117 	ldw	r17,4(sp)
    869c:	dc000017 	ldw	r16,0(sp)
    86a0:	dec00504 	addi	sp,sp,20
    86a4:	f800283a 	ret

000086a8 <convert_memory_data_to_hexformat>:

void convert_memory_data_to_hexformat(const MemoryData* md, char* hf) {
    86a8:	defff704 	addi	sp,sp,-36
    86ac:	dfc00815 	stw	ra,32(sp)
    86b0:	ddc00715 	stw	r23,28(sp)
    86b4:	dd800615 	stw	r22,24(sp)
    86b8:	dd400515 	stw	r21,20(sp)
    86bc:	dd000415 	stw	r20,16(sp)
    86c0:	dcc00315 	stw	r19,12(sp)
    86c4:	dc800215 	stw	r18,8(sp)
    86c8:	dc400115 	stw	r17,4(sp)
    86cc:	dc000015 	stw	r16,0(sp)
    86d0:	2023883a 	mov	r17,r4
    86d4:	2821883a 	mov	r16,r5
  int i = 0;
  int checksum = (int)checksum_of_memory_data(md);
    86d8:	00085980 	call	8598 <checksum_of_memory_data>
    86dc:	14c03fcc 	andi	r19,r2,255

  hf[0] = ':';
    86e0:	00800e84 	movi	r2,58
    86e4:	80800005 	stb	r2,0(r16)
  // bytecount
  hf[1] = hex_nth_digit(md->bytecount, 1);
    86e8:	89000017 	ldw	r4,0(r17)
    86ec:	01400044 	movi	r5,1
  }
}

void convert_memory_data_to_hexformat(const MemoryData* md, char* hf) {
  int i = 0;
  int checksum = (int)checksum_of_memory_data(md);
    86f0:	9cc0201c 	xori	r19,r19,128

  hf[0] = ':';
  // bytecount
  hf[1] = hex_nth_digit(md->bytecount, 1);
    86f4:	0008c740 	call	8c74 <hex_nth_digit>
    86f8:	80800045 	stb	r2,1(r16)
  hf[2] = hex_nth_digit(md->bytecount, 0);
    86fc:	89000017 	ldw	r4,0(r17)
    8700:	000b883a 	mov	r5,zero
  }
}

void convert_memory_data_to_hexformat(const MemoryData* md, char* hf) {
  int i = 0;
  int checksum = (int)checksum_of_memory_data(md);
    8704:	9cffe004 	addi	r19,r19,-128

  hf[0] = ':';
  // bytecount
  hf[1] = hex_nth_digit(md->bytecount, 1);
  hf[2] = hex_nth_digit(md->bytecount, 0);
    8708:	0008c740 	call	8c74 <hex_nth_digit>
    870c:	80800085 	stb	r2,2(r16)
  // address
  hf[3] = hex_nth_digit(md->address, 3);
    8710:	89000117 	ldw	r4,4(r17)
    8714:	014000c4 	movi	r5,3
    8718:	8c800304 	addi	r18,r17,12
    871c:	0008c740 	call	8c74 <hex_nth_digit>
    8720:	808000c5 	stb	r2,3(r16)
  hf[4] = hex_nth_digit(md->address, 2);
    8724:	89000117 	ldw	r4,4(r17)
    8728:	01400084 	movi	r5,2
    872c:	85800244 	addi	r22,r16,9
    8730:	0008c740 	call	8c74 <hex_nth_digit>
    8734:	80800105 	stb	r2,4(r16)
  hf[5] = hex_nth_digit(md->address, 1);
    8738:	89000117 	ldw	r4,4(r17)
    873c:	01400044 	movi	r5,1
    8740:	8029883a 	mov	r20,r16
    8744:	0008c740 	call	8c74 <hex_nth_digit>
    8748:	80800145 	stb	r2,5(r16)
  hf[6] = hex_nth_digit(md->address, 0);
    874c:	89000117 	ldw	r4,4(r17)
    8750:	000b883a 	mov	r5,zero
    8754:	85c00284 	addi	r23,r16,10
    8758:	0008c740 	call	8c74 <hex_nth_digit>
    875c:	80800185 	stb	r2,6(r16)
  // recordtype
  hf[7] = hex_nth_digit(md->recordtype, 1);
    8760:	89000217 	ldw	r4,8(r17)
    8764:	01400044 	movi	r5,1
  hf[8] = hex_nth_digit(md->recordtype, 0);
  // data
  for (i = 0; i < md->bytecount / 4; ++i) {
    8768:	002b883a 	mov	r21,zero
  hf[3] = hex_nth_digit(md->address, 3);
  hf[4] = hex_nth_digit(md->address, 2);
  hf[5] = hex_nth_digit(md->address, 1);
  hf[6] = hex_nth_digit(md->address, 0);
  // recordtype
  hf[7] = hex_nth_digit(md->recordtype, 1);
    876c:	0008c740 	call	8c74 <hex_nth_digit>
    8770:	808001c5 	stb	r2,7(r16)
  hf[8] = hex_nth_digit(md->recordtype, 0);
    8774:	89000217 	ldw	r4,8(r17)
    8778:	000b883a 	mov	r5,zero
    877c:	0008c740 	call	8c74 <hex_nth_digit>
    8780:	80800205 	stb	r2,8(r16)
  // data
  for (i = 0; i < md->bytecount / 4; ++i) {
    8784:	88c00017 	ldw	r3,0(r17)
    8788:	a5000204 	addi	r20,r20,8
    878c:	1805883a 	mov	r2,r3
    8790:	1800010e 	bge	r3,zero,8798 <convert_memory_data_to_hexformat+0xf0>
    8794:	188000c4 	addi	r2,r3,3
    8798:	1005d0ba 	srai	r2,r2,2
    879c:	a880250e 	bge	r21,r2,8834 <convert_memory_data_to_hexformat+0x18c>
    hf[9 + 8 * i + 0] = hex_nth_digit(md->data[i], 7);
    87a0:	91000017 	ldw	r4,0(r18)
    87a4:	014001c4 	movi	r5,7
  hf[6] = hex_nth_digit(md->address, 0);
  // recordtype
  hf[7] = hex_nth_digit(md->recordtype, 1);
  hf[8] = hex_nth_digit(md->recordtype, 0);
  // data
  for (i = 0; i < md->bytecount / 4; ++i) {
    87a8:	ad400044 	addi	r21,r21,1
    hf[9 + 8 * i + 0] = hex_nth_digit(md->data[i], 7);
    87ac:	0008c740 	call	8c74 <hex_nth_digit>
    87b0:	b0800005 	stb	r2,0(r22)
    hf[9 + 8 * i + 1] = hex_nth_digit(md->data[i], 6);
    87b4:	91000017 	ldw	r4,0(r18)
    87b8:	01400184 	movi	r5,6
    87bc:	94800104 	addi	r18,r18,4
    87c0:	0008c740 	call	8c74 <hex_nth_digit>
    87c4:	b8800005 	stb	r2,0(r23)
    hf[9 + 8 * i + 2] = hex_nth_digit(md->data[i], 5);
    87c8:	913fff17 	ldw	r4,-4(r18)
    87cc:	01400144 	movi	r5,5
    87d0:	b5800204 	addi	r22,r22,8
    87d4:	0008c740 	call	8c74 <hex_nth_digit>
    87d8:	a08000c5 	stb	r2,3(r20)
    hf[9 + 8 * i + 3] = hex_nth_digit(md->data[i], 4);
    87dc:	913fff17 	ldw	r4,-4(r18)
    87e0:	01400104 	movi	r5,4
    87e4:	bdc00204 	addi	r23,r23,8
    87e8:	0008c740 	call	8c74 <hex_nth_digit>
    87ec:	a0800105 	stb	r2,4(r20)
    hf[9 + 8 * i + 4] = hex_nth_digit(md->data[i], 3);
    87f0:	913fff17 	ldw	r4,-4(r18)
    87f4:	014000c4 	movi	r5,3
    87f8:	0008c740 	call	8c74 <hex_nth_digit>
    87fc:	a0800145 	stb	r2,5(r20)
    hf[9 + 8 * i + 5] = hex_nth_digit(md->data[i], 2);
    8800:	913fff17 	ldw	r4,-4(r18)
    8804:	01400084 	movi	r5,2
    8808:	0008c740 	call	8c74 <hex_nth_digit>
    880c:	a0800185 	stb	r2,6(r20)
    hf[9 + 8 * i + 6] = hex_nth_digit(md->data[i], 1);
    8810:	913fff17 	ldw	r4,-4(r18)
    8814:	01400044 	movi	r5,1
    8818:	0008c740 	call	8c74 <hex_nth_digit>
    881c:	a08001c5 	stb	r2,7(r20)
    hf[9 + 8 * i + 7] = hex_nth_digit(md->data[i], 0);
    8820:	913fff17 	ldw	r4,-4(r18)
    8824:	000b883a 	mov	r5,zero
    8828:	0008c740 	call	8c74 <hex_nth_digit>
    882c:	a0800205 	stb	r2,8(r20)
    8830:	003fd406 	br	8784 <_gp+0xffff735c>
  }
  // checksum
  hf[9 + 2 * md->bytecount + 0] = hex_nth_digit(checksum, 1);
    8834:	18c7883a 	add	r3,r3,r3
    8838:	1c800244 	addi	r18,r3,9
    883c:	9809883a 	mov	r4,r19
    8840:	01400044 	movi	r5,1
    8844:	0008c740 	call	8c74 <hex_nth_digit>
    8848:	84a5883a 	add	r18,r16,r18
    884c:	90800005 	stb	r2,0(r18)
  hf[9 + 2 * md->bytecount + 1] = hex_nth_digit(checksum, 0);
    8850:	88c00017 	ldw	r3,0(r17)
    8854:	9809883a 	mov	r4,r19
    8858:	000b883a 	mov	r5,zero
    885c:	18c7883a 	add	r3,r3,r3
    8860:	1c800284 	addi	r18,r3,10
    8864:	84a5883a 	add	r18,r16,r18
    8868:	0008c740 	call	8c74 <hex_nth_digit>
    886c:	90800005 	stb	r2,0(r18)
  // end
  hf[9 + 2 * md->bytecount + 2] = '\r';
    8870:	88800017 	ldw	r2,0(r17)
    8874:	00c00344 	movi	r3,13
    8878:	1085883a 	add	r2,r2,r2
    887c:	8085883a 	add	r2,r16,r2
    8880:	10c002c5 	stb	r3,11(r2)
  hf[9 + 2 * md->bytecount + 3] = '\n';
    8884:	88800017 	ldw	r2,0(r17)
    8888:	00c00284 	movi	r3,10
    888c:	1085883a 	add	r2,r2,r2
    8890:	8085883a 	add	r2,r16,r2
    8894:	10c00305 	stb	r3,12(r2)
  hf[9 + 2 * md->bytecount + 4] = '\0';
    8898:	88800017 	ldw	r2,0(r17)
    889c:	1085883a 	add	r2,r2,r2
    88a0:	80a1883a 	add	r16,r16,r2
    88a4:	80000345 	stb	zero,13(r16)
}
    88a8:	dfc00817 	ldw	ra,32(sp)
    88ac:	ddc00717 	ldw	r23,28(sp)
    88b0:	dd800617 	ldw	r22,24(sp)
    88b4:	dd400517 	ldw	r21,20(sp)
    88b8:	dd000417 	ldw	r20,16(sp)
    88bc:	dcc00317 	ldw	r19,12(sp)
    88c0:	dc800217 	ldw	r18,8(sp)
    88c4:	dc400117 	ldw	r17,4(sp)
    88c8:	dc000017 	ldw	r16,0(sp)
    88cc:	dec00904 	addi	sp,sp,36
    88d0:	f800283a 	ret

000088d4 <convert_shorthexformat_to_memory_data>:

void convert_shorthexformat_to_memory_data(const char* hf, MemoryData* md) {
    88d4:	defffd04 	addi	sp,sp,-12
    88d8:	dfc00215 	stw	ra,8(sp)
    88dc:	dc400115 	stw	r17,4(sp)
    88e0:	dc000015 	stw	r16,0(sp)
    88e4:	2023883a 	mov	r17,r4
    88e8:	2821883a 	mov	r16,r5
  int i;

  md->bytecount  = bytecount_of_hexformat(hf);
    88ec:	0008c980 	call	8c98 <bytecount_of_hexformat>
    88f0:	80800015 	stw	r2,0(r16)
  md->address    = address_of_hexformat(hf);
    88f4:	8809883a 	mov	r4,r17
    88f8:	0008ca80 	call	8ca8 <address_of_hexformat>
    88fc:	80800115 	stw	r2,4(r16)
  md->recordtype = DATA_TYPE;
  for (i = 0; i < md->bytecount / 4; ++i) {
    8900:	80800017 	ldw	r2,0(r16)
void convert_shorthexformat_to_memory_data(const char* hf, MemoryData* md) {
  int i;

  md->bytecount  = bytecount_of_hexformat(hf);
  md->address    = address_of_hexformat(hf);
  md->recordtype = DATA_TYPE;
    8904:	80000215 	stw	zero,8(r16)
  for (i = 0; i < md->bytecount / 4; ++i) {
    8908:	1000010e 	bge	r2,zero,8910 <convert_shorthexformat_to_memory_data+0x3c>
    890c:	108000c4 	addi	r2,r2,3
    8910:	1005d0ba 	srai	r2,r2,2
    8914:	84000304 	addi	r16,r16,12
    8918:	0007883a 	mov	r3,zero
    891c:	1880040e 	bge	r3,r2,8930 <convert_shorthexformat_to_memory_data+0x5c>
    md->data[i] = 0;
    8920:	80000015 	stw	zero,0(r16)
  int i;

  md->bytecount  = bytecount_of_hexformat(hf);
  md->address    = address_of_hexformat(hf);
  md->recordtype = DATA_TYPE;
  for (i = 0; i < md->bytecount / 4; ++i) {
    8924:	18c00044 	addi	r3,r3,1
    8928:	84000104 	addi	r16,r16,4
    892c:	003ffb06 	br	891c <_gp+0xffff74f4>
    md->data[i] = 0;
  }
}
    8930:	dfc00217 	ldw	ra,8(sp)
    8934:	dc400117 	ldw	r17,4(sp)
    8938:	dc000017 	ldw	r16,0(sp)
    893c:	dec00304 	addi	sp,sp,12
    8940:	f800283a 	ret

00008944 <assert_dmem_we>:
#include "altera_avalon_pio_regs.h"

#include "dmem.h"

void assert_dmem_we() {
  IOWR_ALTERA_AVALON_PIO_DATA(DMEM_WE_BASE, 1);
    8944:	00804004 	movi	r2,256
    8948:	00c00044 	movi	r3,1
    894c:	10c00035 	stwio	r3,0(r2)
    8950:	f800283a 	ret

00008954 <negate_dmem_we>:
};

void negate_dmem_we() {
  IOWR_ALTERA_AVALON_PIO_DATA(DMEM_WE_BASE, 0);
    8954:	00804004 	movi	r2,256
    8958:	10000035 	stwio	zero,0(r2)
    895c:	f800283a 	ret

00008960 <assert_dmem_clk>:
};

void assert_dmem_clk() {
  IOWR_ALTERA_AVALON_PIO_DATA(DMEM_CLK_BASE, 1);
    8960:	00804404 	movi	r2,272
    8964:	00c00044 	movi	r3,1
    8968:	10c00035 	stwio	r3,0(r2)
    896c:	f800283a 	ret

00008970 <negate_dmem_clk>:
};

void negate_dmem_clk() {
  IOWR_ALTERA_AVALON_PIO_DATA(DMEM_CLK_BASE, 0);
    8970:	00804404 	movi	r2,272
    8974:	10000035 	stwio	zero,0(r2)
    8978:	f800283a 	ret

0000897c <dmem_wd>:
};

////////
void dmem_wd(int addr, int data) {
  IOWR_ALTERA_AVALON_PIO_DATA(DMEM_ADDR_BASE, addr);
    897c:	00804804 	movi	r2,288
    8980:	11000035 	stwio	r4,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(DMEM_WD_BASE, data);
    8984:	00805004 	movi	r2,320
    8988:	11400035 	stwio	r5,0(r2)
#include "altera_avalon_pio_regs.h"

#include "dmem.h"

void assert_dmem_we() {
  IOWR_ALTERA_AVALON_PIO_DATA(DMEM_WE_BASE, 1);
    898c:	00c00044 	movi	r3,1
    8990:	00804004 	movi	r2,256
    8994:	10c00035 	stwio	r3,0(r2)
void negate_dmem_we() {
  IOWR_ALTERA_AVALON_PIO_DATA(DMEM_WE_BASE, 0);
};

void assert_dmem_clk() {
  IOWR_ALTERA_AVALON_PIO_DATA(DMEM_CLK_BASE, 1);
    8998:	01004404 	movi	r4,272
    899c:	20c00035 	stwio	r3,0(r4)
};

void negate_dmem_clk() {
  IOWR_ALTERA_AVALON_PIO_DATA(DMEM_CLK_BASE, 0);
    89a0:	0007883a 	mov	r3,zero
    89a4:	20c00035 	stwio	r3,0(r4)
void assert_dmem_we() {
  IOWR_ALTERA_AVALON_PIO_DATA(DMEM_WE_BASE, 1);
};

void negate_dmem_we() {
  IOWR_ALTERA_AVALON_PIO_DATA(DMEM_WE_BASE, 0);
    89a8:	10c00035 	stwio	r3,0(r2)
    89ac:	f800283a 	ret

000089b0 <dmem_rd>:
  negate_dmem_clk();
  negate_dmem_we();
}

int dmem_rd(int addr) {
  IOWR_ALTERA_AVALON_PIO_DATA(DMEM_ADDR_BASE, addr);
    89b0:	00804804 	movi	r2,288
    89b4:	11000035 	stwio	r4,0(r2)
void negate_dmem_we() {
  IOWR_ALTERA_AVALON_PIO_DATA(DMEM_WE_BASE, 0);
};

void assert_dmem_clk() {
  IOWR_ALTERA_AVALON_PIO_DATA(DMEM_CLK_BASE, 1);
    89b8:	00804404 	movi	r2,272
    89bc:	00c00044 	movi	r3,1
    89c0:	10c00035 	stwio	r3,0(r2)
};

void negate_dmem_clk() {
  IOWR_ALTERA_AVALON_PIO_DATA(DMEM_CLK_BASE, 0);
    89c4:	10000035 	stwio	zero,0(r2)
int dmem_rd(int addr) {
  IOWR_ALTERA_AVALON_PIO_DATA(DMEM_ADDR_BASE, addr);
  assert_dmem_clk();
  negate_dmem_clk();
  return IORD_ALTERA_AVALON_PIO_DATA(DMEM_RD_BASE);
}
    89c8:	00804c04 	movi	r2,304
    89cc:	10800037 	ldwio	r2,0(r2)
    89d0:	f800283a 	ret

000089d4 <assert_imem_we>:
#include "altera_avalon_pio_regs.h"

#include "imem.h"

void assert_imem_we() {
  IOWR_ALTERA_AVALON_PIO_DATA(IMEM_WE_BASE, 1);
    89d4:	0005883a 	mov	r2,zero
    89d8:	00c00044 	movi	r3,1
    89dc:	10c00035 	stwio	r3,0(r2)
    89e0:	f800283a 	ret

000089e4 <negate_imem_we>:
};

void negate_imem_we() {
  IOWR_ALTERA_AVALON_PIO_DATA(IMEM_WE_BASE, 0);
    89e4:	0005883a 	mov	r2,zero
    89e8:	10800035 	stwio	r2,0(r2)
    89ec:	f800283a 	ret

000089f0 <assert_imem_clk>:
};

void assert_imem_clk() {
  IOWR_ALTERA_AVALON_PIO_DATA(IMEM_CLK_BASE, 1);
    89f0:	00800404 	movi	r2,16
    89f4:	00c00044 	movi	r3,1
    89f8:	10c00035 	stwio	r3,0(r2)
    89fc:	f800283a 	ret

00008a00 <negate_imem_clk>:
};

void negate_imem_clk() {
  IOWR_ALTERA_AVALON_PIO_DATA(IMEM_CLK_BASE, 0);
    8a00:	00800404 	movi	r2,16
    8a04:	10000035 	stwio	zero,0(r2)
    8a08:	f800283a 	ret

00008a0c <imem_wd>:
};

////////
void imem_wd(int addr, int data) {
  IOWR_ALTERA_AVALON_PIO_DATA(IMEM_ADDR_BASE, addr);
    8a0c:	00800804 	movi	r2,32
    8a10:	11000035 	stwio	r4,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(IMEM_WD_BASE, data);
    8a14:	00801004 	movi	r2,64
    8a18:	11400035 	stwio	r5,0(r2)
#include "altera_avalon_pio_regs.h"

#include "imem.h"

void assert_imem_we() {
  IOWR_ALTERA_AVALON_PIO_DATA(IMEM_WE_BASE, 1);
    8a1c:	01000044 	movi	r4,1
    8a20:	0005883a 	mov	r2,zero
    8a24:	11000035 	stwio	r4,0(r2)
void negate_imem_we() {
  IOWR_ALTERA_AVALON_PIO_DATA(IMEM_WE_BASE, 0);
};

void assert_imem_clk() {
  IOWR_ALTERA_AVALON_PIO_DATA(IMEM_CLK_BASE, 1);
    8a28:	00c00404 	movi	r3,16
    8a2c:	19000035 	stwio	r4,0(r3)
};

void negate_imem_clk() {
  IOWR_ALTERA_AVALON_PIO_DATA(IMEM_CLK_BASE, 0);
    8a30:	18800035 	stwio	r2,0(r3)
void assert_imem_we() {
  IOWR_ALTERA_AVALON_PIO_DATA(IMEM_WE_BASE, 1);
};

void negate_imem_we() {
  IOWR_ALTERA_AVALON_PIO_DATA(IMEM_WE_BASE, 0);
    8a34:	10800035 	stwio	r2,0(r2)
    8a38:	f800283a 	ret

00008a3c <imem_rd>:
  negate_imem_clk();
  negate_imem_we();
}

int imem_rd(int addr) {
  IOWR_ALTERA_AVALON_PIO_DATA(IMEM_ADDR_BASE, addr);
    8a3c:	00800804 	movi	r2,32
    8a40:	11000035 	stwio	r4,0(r2)
void negate_imem_we() {
  IOWR_ALTERA_AVALON_PIO_DATA(IMEM_WE_BASE, 0);
};

void assert_imem_clk() {
  IOWR_ALTERA_AVALON_PIO_DATA(IMEM_CLK_BASE, 1);
    8a44:	00800404 	movi	r2,16
    8a48:	00c00044 	movi	r3,1
    8a4c:	10c00035 	stwio	r3,0(r2)
};

void negate_imem_clk() {
  IOWR_ALTERA_AVALON_PIO_DATA(IMEM_CLK_BASE, 0);
    8a50:	10000035 	stwio	zero,0(r2)
int imem_rd(int addr) {
  IOWR_ALTERA_AVALON_PIO_DATA(IMEM_ADDR_BASE, addr);
  assert_imem_clk();
  negate_imem_clk();
  return IORD_ALTERA_AVALON_PIO_DATA(IMEM_RD_BASE);
}
    8a54:	00800c04 	movi	r2,48
    8a58:	10800037 	ldwio	r2,0(r2)
    8a5c:	f800283a 	ret

00008a60 <iport_wd>:
#include "system.h"
#include "altera_avalon_pio_regs.h"
#include "ioport.h"

void iport_wd(int data) {
  IOWR_ALTERA_AVALON_PIO_DATA(IPORT3_DATA_BASE, data);
    8a60:	0080c004 	movi	r2,768
    8a64:	11000035 	stwio	r4,0(r2)
    8a68:	f800283a 	ret

00008a6c <oport_rd>:
}

int oport_rd() {
  return IORD_ALTERA_AVALON_PIO_DATA(OPORT3_DATA_BASE);
}
    8a6c:	0080c404 	movi	r2,784
    8a70:	10800037 	ldwio	r2,0(r2)
    8a74:	f800283a 	ret

00008a78 <assert_prg_mode>:
#include "altera_avalon_pio_regs.h"

#include "prg_mode.h"

void assert_prg_mode() {
  IOWR_ALTERA_AVALON_PIO_DATA(PRG_MODE_BASE, 1);
    8a78:	00808004 	movi	r2,512
    8a7c:	00c00044 	movi	r3,1
    8a80:	10c00035 	stwio	r3,0(r2)
    8a84:	f800283a 	ret

00008a88 <negate_prg_mode>:
}

void negate_prg_mode() {
  IOWR_ALTERA_AVALON_PIO_DATA(PRG_MODE_BASE, 0);
    8a88:	00808004 	movi	r2,512
    8a8c:	10000035 	stwio	zero,0(r2)
    8a90:	f800283a 	ret

00008a94 <assert_rst>:
#include "altera_avalon_pio_regs.h"

#include "rst.h"

void assert_rst() {
  IOWR_ALTERA_AVALON_PIO_DATA(RST_BASE, 1);
    8a94:	00808404 	movi	r2,528
    8a98:	00c00044 	movi	r3,1
    8a9c:	10c00035 	stwio	r3,0(r2)
    8aa0:	f800283a 	ret

00008aa4 <negate_rst>:
}
void negate_rst() {
  IOWR_ALTERA_AVALON_PIO_DATA(RST_BASE, 0);
    8aa4:	00808404 	movi	r2,528
    8aa8:	10000035 	stwio	zero,0(r2)
    8aac:	f800283a 	ret

00008ab0 <getchar>:
#include "system.h"
#include "uart.h"

int getchar() {
  int c;
  c = alt_getchar();
    8ab0:	0008e7c1 	jmpi	8e7c <alt_getchar>

00008ab4 <getstr>:
  //alt_putchar(c); // echo back (remove if not needed)
  return c;
}

void getstr(char* str) { // read one line, skip '_'
    8ab4:	defffa04 	addi	sp,sp,-24
    8ab8:	dd000415 	stw	r20,16(sp)
    8abc:	dcc00315 	stw	r19,12(sp)
    8ac0:	dc800215 	stw	r18,8(sp)
    8ac4:	dc400115 	stw	r17,4(sp)
    8ac8:	dc000015 	stw	r16,0(sp)
    8acc:	dfc00515 	stw	ra,20(sp)
    8ad0:	2023883a 	mov	r17,r4
  int c;
  int index;

  index = 0;
    8ad4:	0021883a 	mov	r16,zero
#include "system.h"
#include "uart.h"

int getchar() {
  int c;
  c = alt_getchar();
    8ad8:	0008e7c0 	call	8e7c <alt_getchar>
  int c;
  int index;

  index = 0;
  c = getchar();
  while(!(c == '\r' || c == '\n')) {
    8adc:	04c00344 	movi	r19,13
    8ae0:	04800284 	movi	r18,10
    if (c != '_') {
    8ae4:	050017c4 	movi	r20,95
  int c;
  int index;

  index = 0;
  c = getchar();
  while(!(c == '\r' || c == '\n')) {
    8ae8:	14c00a1e 	bne	r2,r19,8b14 <getstr+0x60>
      str[index] = (char)c;
      index++;
    }
    c = getchar();
  }
  str[index] = '\0';
    8aec:	8c21883a 	add	r16,r17,r16
    8af0:	80000005 	stb	zero,0(r16)
  return;
}
    8af4:	dfc00517 	ldw	ra,20(sp)
    8af8:	dd000417 	ldw	r20,16(sp)
    8afc:	dcc00317 	ldw	r19,12(sp)
    8b00:	dc800217 	ldw	r18,8(sp)
    8b04:	dc400117 	ldw	r17,4(sp)
    8b08:	dc000017 	ldw	r16,0(sp)
    8b0c:	dec00604 	addi	sp,sp,24
    8b10:	f800283a 	ret
  int c;
  int index;

  index = 0;
  c = getchar();
  while(!(c == '\r' || c == '\n')) {
    8b14:	14bff526 	beq	r2,r18,8aec <_gp+0xffff76c4>
    if (c != '_') {
    8b18:	15000326 	beq	r2,r20,8b28 <getstr+0x74>
      str[index] = (char)c;
    8b1c:	8c07883a 	add	r3,r17,r16
    8b20:	18800005 	stb	r2,0(r3)
      index++;
    8b24:	84000044 	addi	r16,r16,1
#include "system.h"
#include "uart.h"

int getchar() {
  int c;
  c = alt_getchar();
    8b28:	0008e7c0 	call	8e7c <alt_getchar>
    8b2c:	003fee06 	br	8ae8 <_gp+0xffff76c0>

00008b30 <putstr>:
  str[index] = '\0';
  return;
}

void putstr(const char* str) {
	alt_putstr(str);
    8b30:	00091981 	jmpi	9198 <alt_putstr>

00008b34 <tx_str>:
}

void tx_str(const char* str) {
  alt_putstr(str);
    8b34:	00091981 	jmpi	9198 <alt_putstr>

00008b38 <rx_str>:
}

void rx_str(char* str) {
  getstr(str);
    8b38:	0008ab41 	jmpi	8ab4 <getstr>

00008b3c <hexchar_to_int>:
 *      Author: yoshiaki
 */

#include "hexchar_int.h"

int hexchar_to_int(const char c) {
    8b3c:	213ff404 	addi	r4,r4,-48
    8b40:	21003fcc 	andi	r4,r4,255
    8b44:	00800584 	movi	r2,22
    8b48:	11000536 	bltu	r2,r4,8b60 <hexchar_to_int+0x24>
    8b4c:	00800074 	movhi	r2,1
    8b50:	10a4ea84 	addi	r2,r2,-27734
    8b54:	1109883a 	add	r4,r2,r4
    8b58:	20800007 	ldb	r2,0(r4)
    8b5c:	f800283a 	ret
  int value;
  switch (c) {
    8b60:	00bfffc4 	movi	r2,-1
    case 'E': value = 0x0E; break;
    case 'F': value = 0x0F; break;
    default : value = HEX_CONVERTING_ERR; break;
  }
  return value;
}
    8b64:	f800283a 	ret

00008b68 <hex2chars_to_int>:

int hex2chars_to_int(const char c0, const char c1) {
  const int v0 = hexchar_to_int(c0);
    8b68:	21003fcc 	andi	r4,r4,255
    8b6c:	2100201c 	xori	r4,r4,128
    default : value = HEX_CONVERTING_ERR; break;
  }
  return value;
}

int hex2chars_to_int(const char c0, const char c1) {
    8b70:	defffd04 	addi	sp,sp,-12
  const int v0 = hexchar_to_int(c0);
    8b74:	213fe004 	addi	r4,r4,-128
    default : value = HEX_CONVERTING_ERR; break;
  }
  return value;
}

int hex2chars_to_int(const char c0, const char c1) {
    8b78:	dfc00215 	stw	ra,8(sp)
    8b7c:	dc400115 	stw	r17,4(sp)
    8b80:	dc000015 	stw	r16,0(sp)
    8b84:	2823883a 	mov	r17,r5
  const int v0 = hexchar_to_int(c0);
    8b88:	0008b3c0 	call	8b3c <hexchar_to_int>
  const int v1 = hexchar_to_int(c1);
    8b8c:	89003fcc 	andi	r4,r17,255
    8b90:	2100201c 	xori	r4,r4,128
    8b94:	213fe004 	addi	r4,r4,-128
  }
  return value;
}

int hex2chars_to_int(const char c0, const char c1) {
  const int v0 = hexchar_to_int(c0);
    8b98:	1021883a 	mov	r16,r2
  const int v1 = hexchar_to_int(c1);
    8b9c:	0008b3c0 	call	8b3c <hexchar_to_int>
    8ba0:	1007883a 	mov	r3,r2

  if (v0 == HEX_CONVERTING_ERR || v1 == HEX_CONVERTING_ERR) {
    8ba4:	00bfffc4 	movi	r2,-1
    8ba8:	80800426 	beq	r16,r2,8bbc <hex2chars_to_int+0x54>
    8bac:	18800526 	beq	r3,r2,8bc4 <hex2chars_to_int+0x5c>
    return HEX_CONVERTING_ERR;
  }

  return (v0 << 4) + v1;
    8bb0:	8004913a 	slli	r2,r16,4
    8bb4:	10c5883a 	add	r2,r2,r3
    8bb8:	00000306 	br	8bc8 <hex2chars_to_int+0x60>
int hex2chars_to_int(const char c0, const char c1) {
  const int v0 = hexchar_to_int(c0);
  const int v1 = hexchar_to_int(c1);

  if (v0 == HEX_CONVERTING_ERR || v1 == HEX_CONVERTING_ERR) {
    return HEX_CONVERTING_ERR;
    8bbc:	8005883a 	mov	r2,r16
    8bc0:	00000106 	br	8bc8 <hex2chars_to_int+0x60>
    8bc4:	1805883a 	mov	r2,r3
  }

  return (v0 << 4) + v1;
}
    8bc8:	dfc00217 	ldw	ra,8(sp)
    8bcc:	dc400117 	ldw	r17,4(sp)
    8bd0:	dc000017 	ldw	r16,0(sp)
    8bd4:	dec00304 	addi	sp,sp,12
    8bd8:	f800283a 	ret

00008bdc <hex4chars_to_int>:

int hex4chars_to_int(const char c0, const char c1, const char c2, const char c3) {
  const int v0 = hex2chars_to_int(c0, c1);
    8bdc:	21003fcc 	andi	r4,r4,255
    8be0:	29403fcc 	andi	r5,r5,255
    8be4:	2100201c 	xori	r4,r4,128
    8be8:	2940201c 	xori	r5,r5,128
  }

  return (v0 << 4) + v1;
}

int hex4chars_to_int(const char c0, const char c1, const char c2, const char c3) {
    8bec:	defffc04 	addi	sp,sp,-16
  const int v0 = hex2chars_to_int(c0, c1);
    8bf0:	213fe004 	addi	r4,r4,-128
    8bf4:	297fe004 	addi	r5,r5,-128
  }

  return (v0 << 4) + v1;
}

int hex4chars_to_int(const char c0, const char c1, const char c2, const char c3) {
    8bf8:	dfc00315 	stw	ra,12(sp)
    8bfc:	dc800215 	stw	r18,8(sp)
    8c00:	dc400115 	stw	r17,4(sp)
    8c04:	3025883a 	mov	r18,r6
    8c08:	3823883a 	mov	r17,r7
    8c0c:	dc000015 	stw	r16,0(sp)
  const int v0 = hex2chars_to_int(c0, c1);
    8c10:	0008b680 	call	8b68 <hex2chars_to_int>
  const int v1 = hex2chars_to_int(c2, c3);
    8c14:	91003fcc 	andi	r4,r18,255
    8c18:	89403fcc 	andi	r5,r17,255
    8c1c:	2100201c 	xori	r4,r4,128
    8c20:	2940201c 	xori	r5,r5,128
    8c24:	213fe004 	addi	r4,r4,-128
    8c28:	297fe004 	addi	r5,r5,-128

  return (v0 << 4) + v1;
}

int hex4chars_to_int(const char c0, const char c1, const char c2, const char c3) {
  const int v0 = hex2chars_to_int(c0, c1);
    8c2c:	1021883a 	mov	r16,r2
  const int v1 = hex2chars_to_int(c2, c3);
    8c30:	0008b680 	call	8b68 <hex2chars_to_int>
    8c34:	1007883a 	mov	r3,r2

  if (v0 == HEX_CONVERTING_ERR || v1 == HEX_CONVERTING_ERR) {
    8c38:	00bfffc4 	movi	r2,-1
    8c3c:	80800426 	beq	r16,r2,8c50 <hex4chars_to_int+0x74>
    8c40:	18800526 	beq	r3,r2,8c58 <hex4chars_to_int+0x7c>
    return HEX_CONVERTING_ERR;
  }

  return (v0 << 8) + v1;
    8c44:	8004923a 	slli	r2,r16,8
    8c48:	10c5883a 	add	r2,r2,r3
    8c4c:	00000306 	br	8c5c <hex4chars_to_int+0x80>
int hex4chars_to_int(const char c0, const char c1, const char c2, const char c3) {
  const int v0 = hex2chars_to_int(c0, c1);
  const int v1 = hex2chars_to_int(c2, c3);

  if (v0 == HEX_CONVERTING_ERR || v1 == HEX_CONVERTING_ERR) {
    return HEX_CONVERTING_ERR;
    8c50:	8005883a 	mov	r2,r16
    8c54:	00000106 	br	8c5c <hex4chars_to_int+0x80>
    8c58:	1805883a 	mov	r2,r3
  }

  return (v0 << 8) + v1;
}
    8c5c:	dfc00317 	ldw	ra,12(sp)
    8c60:	dc800217 	ldw	r18,8(sp)
    8c64:	dc400117 	ldw	r17,4(sp)
    8c68:	dc000017 	ldw	r16,0(sp)
    8c6c:	dec00404 	addi	sp,sp,16
    8c70:	f800283a 	ret

00008c74 <hex_nth_digit>:

char hex_nth_digit(const int number, const int nth) {
  const char nth_digit = (char)((number >> (nth * 4)) & 0xF);
    8c74:	294b883a 	add	r5,r5,r5
    8c78:	294b883a 	add	r5,r5,r5
    8c7c:	2149d83a 	sra	r4,r4,r5
    8c80:	214003cc 	andi	r5,r4,15
    8c84:	01000074 	movhi	r4,1
    8c88:	2124e684 	addi	r4,r4,-27750
    8c8c:	214b883a 	add	r5,r4,r5
    case 0xF: hex = 'F'; break;
    default:  hex = 'x'; break;
  }

  return hex;
}
    8c90:	28800003 	ldbu	r2,0(r5)
    8c94:	f800283a 	ret

00008c98 <bytecount_of_hexformat>:

#include "hexchar_int.h"

#include "hexformat.h"

int bytecount_of_hexformat(const char* hf){
    8c98:	2005883a 	mov	r2,r4
  const int offset = 1;
  return hex2chars_to_int(hf[offset+0], hf[offset+1]);
    8c9c:	11400087 	ldb	r5,2(r2)
    8ca0:	21000047 	ldb	r4,1(r4)
    8ca4:	0008b681 	jmpi	8b68 <hex2chars_to_int>

00008ca8 <address_of_hexformat>:
}
int address_of_hexformat(const char* hf) {
    8ca8:	2005883a 	mov	r2,r4
  const int offset = 3;
  return hex4chars_to_int(hf[offset+0], hf[offset+1], hf[offset+2], hf[offset+3]);
    8cac:	11400107 	ldb	r5,4(r2)
    8cb0:	210000c7 	ldb	r4,3(r4)
    8cb4:	11800147 	ldb	r6,5(r2)
    8cb8:	11c00187 	ldb	r7,6(r2)
    8cbc:	0008bdc1 	jmpi	8bdc <hex4chars_to_int>

00008cc0 <recordtype_of_hexformat>:
}

int recordtype_of_hexformat(const char* hf) {
    8cc0:	2005883a 	mov	r2,r4
  const int offset = 7;
  return hex2chars_to_int(hf[offset+0], hf[offset+1]);
    8cc4:	11400207 	ldb	r5,8(r2)
    8cc8:	210001c7 	ldb	r4,7(r4)
    8ccc:	0008b681 	jmpi	8b68 <hex2chars_to_int>

00008cd0 <data_of_hexformat>:
}

int data_of_hexformat(const char* hf, const int n) {
  const int offset = 9 + 8 * n;
    8cd0:	280a90fa 	slli	r5,r5,3
int recordtype_of_hexformat(const char* hf) {
  const int offset = 7;
  return hex2chars_to_int(hf[offset+0], hf[offset+1]);
}

int data_of_hexformat(const char* hf, const int n) {
    8cd4:	defffb04 	addi	sp,sp,-20
    8cd8:	dc000015 	stw	r16,0(sp)
  const int offset = 9 + 8 * n;
    8cdc:	2c000244 	addi	r16,r5,9
  const int d3 = hex2chars_to_int(hf[offset+0], hf[offset+1]);
    8ce0:	2421883a 	add	r16,r4,r16
int recordtype_of_hexformat(const char* hf) {
  const int offset = 7;
  return hex2chars_to_int(hf[offset+0], hf[offset+1]);
}

int data_of_hexformat(const char* hf, const int n) {
    8ce4:	dfc00415 	stw	ra,16(sp)
    8ce8:	dcc00315 	stw	r19,12(sp)
    8cec:	dc800215 	stw	r18,8(sp)
    8cf0:	dc400115 	stw	r17,4(sp)
  const int offset = 9 + 8 * n;
  const int d3 = hex2chars_to_int(hf[offset+0], hf[offset+1]);
    8cf4:	81000007 	ldb	r4,0(r16)
    8cf8:	81400047 	ldb	r5,1(r16)
    8cfc:	0008b680 	call	8b68 <hex2chars_to_int>
  const int d2 = hex2chars_to_int(hf[offset+2], hf[offset+3]);
    8d00:	81000087 	ldb	r4,2(r16)
    8d04:	814000c7 	ldb	r5,3(r16)
  return hex2chars_to_int(hf[offset+0], hf[offset+1]);
}

int data_of_hexformat(const char* hf, const int n) {
  const int offset = 9 + 8 * n;
  const int d3 = hex2chars_to_int(hf[offset+0], hf[offset+1]);
    8d08:	1027883a 	mov	r19,r2
  const int d2 = hex2chars_to_int(hf[offset+2], hf[offset+3]);
  const int d1 = hex2chars_to_int(hf[offset+4], hf[offset+5]);
  const int d0 = hex2chars_to_int(hf[offset+6], hf[offset+7]);
  return (d3 << 24) + (d2 << 16) + (d1 << 8) + d0;
    8d0c:	9826963a 	slli	r19,r19,24
}

int data_of_hexformat(const char* hf, const int n) {
  const int offset = 9 + 8 * n;
  const int d3 = hex2chars_to_int(hf[offset+0], hf[offset+1]);
  const int d2 = hex2chars_to_int(hf[offset+2], hf[offset+3]);
    8d10:	0008b680 	call	8b68 <hex2chars_to_int>
  const int d1 = hex2chars_to_int(hf[offset+4], hf[offset+5]);
    8d14:	81000107 	ldb	r4,4(r16)
    8d18:	81400147 	ldb	r5,5(r16)
}

int data_of_hexformat(const char* hf, const int n) {
  const int offset = 9 + 8 * n;
  const int d3 = hex2chars_to_int(hf[offset+0], hf[offset+1]);
  const int d2 = hex2chars_to_int(hf[offset+2], hf[offset+3]);
    8d1c:	1025883a 	mov	r18,r2
  const int d1 = hex2chars_to_int(hf[offset+4], hf[offset+5]);
  const int d0 = hex2chars_to_int(hf[offset+6], hf[offset+7]);
  return (d3 << 24) + (d2 << 16) + (d1 << 8) + d0;
    8d20:	9024943a 	slli	r18,r18,16

int data_of_hexformat(const char* hf, const int n) {
  const int offset = 9 + 8 * n;
  const int d3 = hex2chars_to_int(hf[offset+0], hf[offset+1]);
  const int d2 = hex2chars_to_int(hf[offset+2], hf[offset+3]);
  const int d1 = hex2chars_to_int(hf[offset+4], hf[offset+5]);
    8d24:	0008b680 	call	8b68 <hex2chars_to_int>
    8d28:	1023883a 	mov	r17,r2
  const int d0 = hex2chars_to_int(hf[offset+6], hf[offset+7]);
    8d2c:	81000187 	ldb	r4,6(r16)
    8d30:	814001c7 	ldb	r5,7(r16)
  return (d3 << 24) + (d2 << 16) + (d1 << 8) + d0;
    8d34:	8822923a 	slli	r17,r17,8
    8d38:	9ca5883a 	add	r18,r19,r18
int data_of_hexformat(const char* hf, const int n) {
  const int offset = 9 + 8 * n;
  const int d3 = hex2chars_to_int(hf[offset+0], hf[offset+1]);
  const int d2 = hex2chars_to_int(hf[offset+2], hf[offset+3]);
  const int d1 = hex2chars_to_int(hf[offset+4], hf[offset+5]);
  const int d0 = hex2chars_to_int(hf[offset+6], hf[offset+7]);
    8d3c:	0008b680 	call	8b68 <hex2chars_to_int>
  return (d3 << 24) + (d2 << 16) + (d1 << 8) + d0;
    8d40:	9463883a 	add	r17,r18,r17
}
    8d44:	8885883a 	add	r2,r17,r2
    8d48:	dfc00417 	ldw	ra,16(sp)
    8d4c:	dcc00317 	ldw	r19,12(sp)
    8d50:	dc800217 	ldw	r18,8(sp)
    8d54:	dc400117 	ldw	r17,4(sp)
    8d58:	dc000017 	ldw	r16,0(sp)
    8d5c:	dec00504 	addi	sp,sp,20
    8d60:	f800283a 	ret

00008d64 <checksum_of_hexformat>:

char checksum_of_hexformat(const char* hf) {
    8d64:	defffe04 	addi	sp,sp,-8
    8d68:	dfc00115 	stw	ra,4(sp)
    8d6c:	dc000015 	stw	r16,0(sp)
    8d70:	2021883a 	mov	r16,r4
  const int offset = 9 + 2 * bytecount_of_hexformat(hf);
    8d74:	0008c980 	call	8c98 <bytecount_of_hexformat>
    8d78:	1085883a 	add	r2,r2,r2
    8d7c:	10800244 	addi	r2,r2,9
  return (char)(hex2chars_to_int(hf[offset+0], hf[offset+1]));
    8d80:	8085883a 	add	r2,r16,r2
    8d84:	11000007 	ldb	r4,0(r2)
    8d88:	11400047 	ldb	r5,1(r2)
    8d8c:	0008b680 	call	8b68 <hex2chars_to_int>
}
    8d90:	dfc00117 	ldw	ra,4(sp)
    8d94:	dc000017 	ldw	r16,0(sp)
    8d98:	dec00204 	addi	sp,sp,8
    8d9c:	f800283a 	ret

00008da0 <monitor_command>:
    return MONITOR_COMMAND_ERR;
  }
}

int unique(const char c0, const char c1) {
  return (c0 << 8) + c1;
    8da0:	20800007 	ldb	r2,0(r4)
    8da4:	1006923a 	slli	r3,r2,8
    8da8:	20800047 	ldb	r2,1(r4)
    8dac:	1885883a 	add	r2,r3,r2
  const int WD = unique('W','D');
  const int IP = unique('I','P');
  const int OP = unique('O','P');
  //
  const int command = unique(str[0], str[1]);
  if (command == AR) {
    8db0:	00d05484 	movi	r3,16722
    8db4:	10c01426 	beq	r2,r3,8e08 <monitor_command+0x68>
    return MONITOR_COMMAND_AR;
  } else if (command == NR) {
    8db8:	00d39484 	movi	r3,20050
    8dbc:	10c01426 	beq	r2,r3,8e10 <monitor_command+0x70>
    return MONITOR_COMMAND_NR;
  } else if (command == AP) {
    8dc0:	00d05404 	movi	r3,16720
    8dc4:	10c01426 	beq	r2,r3,8e18 <monitor_command+0x78>
    return MONITOR_COMMAND_AP;
  } else if (command == NP) {
    8dc8:	00d39404 	movi	r3,20048
    8dcc:	10c01426 	beq	r2,r3,8e20 <monitor_command+0x80>
    return MONITOR_COMMAND_NP;
  } else if (command == RI) {
    8dd0:	00d49244 	movi	r3,21065
    8dd4:	10c01426 	beq	r2,r3,8e28 <monitor_command+0x88>
    return MONITOR_COMMAND_RI;
  } else if (command == WI) {
    8dd8:	00d5d244 	movi	r3,22345
    8ddc:	10c01426 	beq	r2,r3,8e30 <monitor_command+0x90>
    return MONITOR_COMMAND_WI;
  } else if (command == RD) {
    8de0:	00d49104 	movi	r3,21060
    8de4:	10c01426 	beq	r2,r3,8e38 <monitor_command+0x98>
    return MONITOR_COMMAND_RD;
  } else if (command == WD) {
    8de8:	00d5d104 	movi	r3,22340
    8dec:	10c01426 	beq	r2,r3,8e40 <monitor_command+0xa0>
    return MONITOR_COMMAND_WD;
  } else if (command == IP) {
    8df0:	00d25404 	movi	r3,18768
    8df4:	10c01426 	beq	r2,r3,8e48 <monitor_command+0xa8>
    return MONITOR_COMMAND_IP;
  } else if (command == OP) {
    8df8:	00d3d404 	movi	r3,20304
    8dfc:	10c01426 	beq	r2,r3,8e50 <monitor_command+0xb0>
    return MONITOR_COMMAND_OP;
  } else {
    return MONITOR_COMMAND_ERR;
    8e00:	00bfffc4 	movi	r2,-1
    8e04:	f800283a 	ret
  const int IP = unique('I','P');
  const int OP = unique('O','P');
  //
  const int command = unique(str[0], str[1]);
  if (command == AR) {
    return MONITOR_COMMAND_AR;
    8e08:	00800044 	movi	r2,1
    8e0c:	f800283a 	ret
  } else if (command == NR) {
    return MONITOR_COMMAND_NR;
    8e10:	00800084 	movi	r2,2
    8e14:	f800283a 	ret
  } else if (command == AP) {
    return MONITOR_COMMAND_AP;
    8e18:	008000c4 	movi	r2,3
    8e1c:	f800283a 	ret
  } else if (command == NP) {
    return MONITOR_COMMAND_NP;
    8e20:	00800104 	movi	r2,4
    8e24:	f800283a 	ret
  } else if (command == RI) {
    return MONITOR_COMMAND_RI;
    8e28:	00800144 	movi	r2,5
    8e2c:	f800283a 	ret
  } else if (command == WI) {
    return MONITOR_COMMAND_WI;
    8e30:	00800184 	movi	r2,6
    8e34:	f800283a 	ret
  } else if (command == RD) {
    return MONITOR_COMMAND_RD;
    8e38:	008001c4 	movi	r2,7
    8e3c:	f800283a 	ret
  } else if (command == WD) {
    return MONITOR_COMMAND_WD;
    8e40:	00800204 	movi	r2,8
    8e44:	f800283a 	ret
  } else if (command == IP) {
    return MONITOR_COMMAND_IP;
    8e48:	00800244 	movi	r2,9
    8e4c:	f800283a 	ret
  } else if (command == OP) {
    return MONITOR_COMMAND_OP;
    8e50:	00800284 	movi	r2,10
  } else {
    return MONITOR_COMMAND_ERR;
  }
}
    8e54:	f800283a 	ret

00008e58 <unique>:

int unique(const char c0, const char c1) {
  return (c0 << 8) + c1;
    8e58:	21003fcc 	andi	r4,r4,255
    8e5c:	2100201c 	xori	r4,r4,128
    8e60:	213fe004 	addi	r4,r4,-128
    8e64:	2008923a 	slli	r4,r4,8
    8e68:	28803fcc 	andi	r2,r5,255
    8e6c:	1080201c 	xori	r2,r2,128
    8e70:	10bfe004 	addi	r2,r2,-128
}
    8e74:	2085883a 	add	r2,r4,r2
    8e78:	f800283a 	ret

00008e7c <alt_getchar>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    8e7c:	00800074 	movhi	r2,1
    8e80:	10a4f404 	addi	r2,r2,-27696
    8e84:	11c00217 	ldw	r7,8(r2)
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
    8e88:	defffe04 	addi	sp,sp,-8
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    8e8c:	01000074 	movhi	r4,1
    8e90:	21250b04 	addi	r4,r4,-27604
    8e94:	d80b883a 	mov	r5,sp
    8e98:	01800044 	movi	r6,1
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
    8e9c:	dfc00115 	stw	ra,4(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    8ea0:	00091f40 	call	91f4 <altera_avalon_uart_read>
    8ea4:	0080020e 	bge	zero,r2,8eb0 <alt_getchar+0x34>
        return -1;
    }
    return c;
    8ea8:	d8800007 	ldb	r2,0(sp)
    8eac:	00000106 	br	8eb4 <alt_getchar+0x38>
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
    8eb0:	00bfffc4 	movi	r2,-1
    return c;
#else
    return getchar();
#endif
#endif
}
    8eb4:	dfc00117 	ldw	ra,4(sp)
    8eb8:	dec00204 	addi	sp,sp,8
    8ebc:	f800283a 	ret

00008ec0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8ec0:	deffff04 	addi	sp,sp,-4
    8ec4:	01000074 	movhi	r4,1
    8ec8:	01400074 	movhi	r5,1
    8ecc:	dfc00015 	stw	ra,0(sp)
    8ed0:	2124f404 	addi	r4,r4,-27696
    8ed4:	29651304 	addi	r5,r5,-27572

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8ed8:	2140061e 	bne	r4,r5,8ef4 <alt_load+0x34>
    8edc:	01000074 	movhi	r4,1
    8ee0:	01400074 	movhi	r5,1
    8ee4:	21200804 	addi	r4,r4,-32736
    8ee8:	29600804 	addi	r5,r5,-32736
    8eec:	2140141e 	bne	r4,r5,8f40 <alt_load+0x80>
    8ef0:	00000d06 	br	8f28 <alt_load+0x68>
    8ef4:	00c00074 	movhi	r3,1
    8ef8:	18e51304 	addi	r3,r3,-27572
    8efc:	00bfff04 	movi	r2,-4
    8f00:	1907c83a 	sub	r3,r3,r4
    8f04:	1886703a 	and	r3,r3,r2
    8f08:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8f0c:	10fff326 	beq	r2,r3,8edc <_gp+0xffff7ab4>
    8f10:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
    8f14:	39c00017 	ldw	r7,0(r7)
    8f18:	110d883a 	add	r6,r2,r4
    8f1c:	10800104 	addi	r2,r2,4
    8f20:	31c00015 	stw	r7,0(r6)
    8f24:	003ff906 	br	8f0c <_gp+0xffff7ae4>
    8f28:	01000074 	movhi	r4,1
    8f2c:	01400074 	movhi	r5,1
    8f30:	2124d104 	addi	r4,r4,-27836
    8f34:	2964d104 	addi	r5,r5,-27836

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8f38:	2140121e 	bne	r4,r5,8f84 <alt_load+0xc4>
    8f3c:	00000d06 	br	8f74 <alt_load+0xb4>
    8f40:	00c00074 	movhi	r3,1
    8f44:	18e00804 	addi	r3,r3,-32736
    8f48:	00bfff04 	movi	r2,-4
    8f4c:	1907c83a 	sub	r3,r3,r4
    8f50:	1886703a 	and	r3,r3,r2
    8f54:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8f58:	10fff326 	beq	r2,r3,8f28 <_gp+0xffff7b00>
    8f5c:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
    8f60:	39c00017 	ldw	r7,0(r7)
    8f64:	110d883a 	add	r6,r2,r4
    8f68:	10800104 	addi	r2,r2,4
    8f6c:	31c00015 	stw	r7,0(r6)
    8f70:	003ff906 	br	8f58 <_gp+0xffff7b30>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8f74:	00093100 	call	9310 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    8f78:	dfc00017 	ldw	ra,0(sp)
    8f7c:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    8f80:	000931c1 	jmpi	931c <alt_icache_flush_all>
    8f84:	00c00074 	movhi	r3,1
    8f88:	18e4f404 	addi	r3,r3,-27696
    8f8c:	00bfff04 	movi	r2,-4
    8f90:	1907c83a 	sub	r3,r3,r4
    8f94:	1886703a 	and	r3,r3,r2

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8f98:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8f9c:	10fff526 	beq	r2,r3,8f74 <_gp+0xffff7b4c>
    8fa0:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
    8fa4:	39c00017 	ldw	r7,0(r7)
    8fa8:	110d883a 	add	r6,r2,r4
    8fac:	10800104 	addi	r2,r2,4
    8fb0:	31c00015 	stw	r7,0(r6)
    8fb4:	003ff906 	br	8f9c <_gp+0xffff7b74>

00008fb8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8fb8:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8fbc:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8fc0:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8fc4:	00091d00 	call	91d0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8fc8:	00091f00 	call	91f0 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8fcc:	d1202a17 	ldw	r4,-32600(gp)
    8fd0:	d1602917 	ldw	r5,-32604(gp)
    8fd4:	d1a02817 	ldw	r6,-32608(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    8fd8:	dfc00017 	ldw	ra,0(sp)
    8fdc:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8fe0:	00082a81 	jmpi	82a8 <main>

00008fe4 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    8fe4:	defff204 	addi	sp,sp,-56
    8fe8:	dfc00a15 	stw	ra,40(sp)
    8fec:	df000915 	stw	fp,36(sp)
    8ff0:	ddc00815 	stw	r23,32(sp)
    8ff4:	dd800715 	stw	r22,28(sp)
    8ff8:	dd400615 	stw	r21,24(sp)
    8ffc:	dd000515 	stw	r20,20(sp)
    9000:	dcc00415 	stw	r19,16(sp)
    9004:	dc800315 	stw	r18,12(sp)
    9008:	dc400215 	stw	r17,8(sp)
    900c:	dc000115 	stw	r16,4(sp)
    9010:	d9400b15 	stw	r5,44(sp)
    9014:	d9800c15 	stw	r6,48(sp)
    9018:	d9c00d15 	stw	r7,52(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    901c:	04000944 	movi	r16,37
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    9020:	2005883a 	mov	r2,r4
	va_list args;
	va_start(args, fmt);
    9024:	dd400b04 	addi	r21,sp,44
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
    9028:	048018c4 	movi	r18,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
    902c:	04c01e04 	movi	r19,120
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    9030:	05001cc4 	movi	r20,115
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    9034:	11000007 	ldb	r4,0(r2)
    9038:	20003926 	beq	r4,zero,9120 <alt_printf+0x13c>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    903c:	24000226 	beq	r4,r16,9048 <alt_printf+0x64>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    9040:	14400044 	addi	r17,r2,1
    9044:	00001106 	br	908c <alt_printf+0xa8>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    9048:	14400084 	addi	r17,r2,2
    904c:	10800047 	ldb	r2,1(r2)
    9050:	10003326 	beq	r2,zero,9120 <alt_printf+0x13c>
            {
                if (c == '%')
    9054:	1400021e 	bne	r2,r16,9060 <alt_printf+0x7c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
    9058:	8009883a 	mov	r4,r16
    905c:	00000b06 	br	908c <alt_printf+0xa8>
                } 
                else if (c == 'c')
    9060:	1480051e 	bne	r2,r18,9078 <alt_printf+0x94>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
    9064:	a9000017 	ldw	r4,0(r21)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
    9068:	ad800104 	addi	r22,r21,4
    906c:	b02b883a 	mov	r21,r22
                    alt_putchar(v);
    9070:	00091500 	call	9150 <alt_putchar>
    9074:	00002806 	br	9118 <alt_printf+0x134>
                }
                else if (c == 'x')
    9078:	14c01f1e 	bne	r2,r19,90f8 <alt_printf+0x114>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    907c:	adc00017 	ldw	r23,0(r21)
    9080:	ad400104 	addi	r21,r21,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    9084:	b800031e 	bne	r23,zero,9094 <alt_printf+0xb0>
                    {
                        alt_putchar('0');
    9088:	01000c04 	movi	r4,48
    908c:	00091500 	call	9150 <alt_putchar>
                        continue;
    9090:	00002106 	br	9118 <alt_printf+0x134>
    9094:	05800704 	movi	r22,28
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    9098:	00c003c4 	movi	r3,15
    909c:	1d84983a 	sll	r2,r3,r22
    90a0:	15c4703a 	and	r2,r2,r23
    90a4:	1000021e 	bne	r2,zero,90b0 <alt_printf+0xcc>
                        digit_shift -= 4;
    90a8:	b5bfff04 	addi	r22,r22,-4
    90ac:	003ffb06 	br	909c <_gp+0xffff7c74>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    90b0:	070003c4 	movi	fp,15
                        if (digit <= 9)
    90b4:	00c00244 	movi	r3,9
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    90b8:	b0001716 	blt	r22,zero,9118 <alt_printf+0x134>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    90bc:	e584983a 	sll	r2,fp,r22
    90c0:	15c4703a 	and	r2,r2,r23
    90c4:	1584d83a 	srl	r2,r2,r22
                        if (digit <= 9)
    90c8:	18800236 	bltu	r3,r2,90d4 <alt_printf+0xf0>
                            c = '0' + digit;
    90cc:	11000c04 	addi	r4,r2,48
    90d0:	00000106 	br	90d8 <alt_printf+0xf4>
                        else
                            c = 'a' + digit - 10;
    90d4:	110015c4 	addi	r4,r2,87
                        alt_putchar(c);
    90d8:	21003fcc 	andi	r4,r4,255
    90dc:	2100201c 	xori	r4,r4,128
    90e0:	213fe004 	addi	r4,r4,-128
    90e4:	d8c00015 	stw	r3,0(sp)
    90e8:	00091500 	call	9150 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    90ec:	b5bfff04 	addi	r22,r22,-4
    90f0:	d8c00017 	ldw	r3,0(sp)
    90f4:	003ff006 	br	90b8 <_gp+0xffff7c90>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    90f8:	1500071e 	bne	r2,r20,9118 <alt_printf+0x134>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    90fc:	ad800017 	ldw	r22,0(r21)
    9100:	ad400104 	addi	r21,r21,4

                    while(*s)
    9104:	b1000007 	ldb	r4,0(r22)
    9108:	20000326 	beq	r4,zero,9118 <alt_printf+0x134>
                      alt_putchar(*s++);
    910c:	b5800044 	addi	r22,r22,1
    9110:	00091500 	call	9150 <alt_putchar>
    9114:	003ffb06 	br	9104 <_gp+0xffff7cdc>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
    9118:	8805883a 	mov	r2,r17
    911c:	003fc506 	br	9034 <_gp+0xffff7c0c>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
    9120:	dfc00a17 	ldw	ra,40(sp)
    9124:	df000917 	ldw	fp,36(sp)
    9128:	ddc00817 	ldw	r23,32(sp)
    912c:	dd800717 	ldw	r22,28(sp)
    9130:	dd400617 	ldw	r21,24(sp)
    9134:	dd000517 	ldw	r20,20(sp)
    9138:	dcc00417 	ldw	r19,16(sp)
    913c:	dc800317 	ldw	r18,12(sp)
    9140:	dc400217 	ldw	r17,8(sp)
    9144:	dc000117 	ldw	r16,4(sp)
    9148:	dec00e04 	addi	sp,sp,56
    914c:	f800283a 	ret

00009150 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    9150:	defffd04 	addi	sp,sp,-12
    9154:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
    9158:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    915c:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    9160:	01000074 	movhi	r4,1
    9164:	21250b04 	addi	r4,r4,-27604
    9168:	d80b883a 	mov	r5,sp
    916c:	01800044 	movi	r6,1
    9170:	000f883a 	mov	r7,zero
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    9174:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    9178:	00092800 	call	9280 <altera_avalon_uart_write>
    917c:	00ffffc4 	movi	r3,-1
    9180:	10c00126 	beq	r2,r3,9188 <alt_putchar+0x38>
        return -1;
    }
    return c;
    9184:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
    9188:	dfc00217 	ldw	ra,8(sp)
    918c:	dc000117 	ldw	r16,4(sp)
    9190:	dec00304 	addi	sp,sp,12
    9194:	f800283a 	ret

00009198 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    9198:	defffe04 	addi	sp,sp,-8
    919c:	dc000015 	stw	r16,0(sp)
    91a0:	dfc00115 	stw	ra,4(sp)
    91a4:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    91a8:	00093280 	call	9328 <strlen>
    91ac:	01000074 	movhi	r4,1
    91b0:	21250b04 	addi	r4,r4,-27604
    91b4:	800b883a 	mov	r5,r16
    91b8:	100d883a 	mov	r6,r2
    91bc:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
#endif
}
    91c0:	dfc00117 	ldw	ra,4(sp)
    91c4:	dc000017 	ldw	r16,0(sp)
    91c8:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    91cc:	00092801 	jmpi	9280 <altera_avalon_uart_write>

000091d0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    91d0:	deffff04 	addi	sp,sp,-4
    91d4:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_PROCESSOR, nios2_processor);
    91d8:	00093200 	call	9320 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    91dc:	00800044 	movi	r2,1
    91e0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    91e4:	dfc00017 	ldw	ra,0(sp)
    91e8:	dec00104 	addi	sp,sp,4
    91ec:	f800283a 	ret

000091f0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    91f0:	f800283a 	ret

000091f4 <altera_avalon_uart_read>:
  int flags)
{
  int block;
  unsigned int status;

  block = !(flags & O_NONBLOCK);
    91f4:	39d0000c 	andi	r7,r7,16384

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
    91f8:	20c00017 	ldw	r3,0(r4)
    91fc:	18c00204 	addi	r3,r3,8
    9200:	18800037 	ldwio	r2,0(r3)

    /* clear any error flags */

    IOWR_ALTERA_AVALON_UART_STATUS(sp->base, 0);
    9204:	18000035 	stwio	zero,0(r3)

    if (status & ALTERA_AVALON_UART_CONTROL_RRDY_MSK)
    9208:	10c0200c 	andi	r3,r2,128
    920c:	1800021e 	bne	r3,zero,9218 <altera_avalon_uart_read+0x24>
      {
        return 1;
      }
    }
  }
  while (block);
    9210:	383ff926 	beq	r7,zero,91f8 <_gp+0xffff7dd0>
    9214:	00000706 	br	9234 <altera_avalon_uart_read+0x40>

    IOWR_ALTERA_AVALON_UART_STATUS(sp->base, 0);

    if (status & ALTERA_AVALON_UART_CONTROL_RRDY_MSK)
    {
      ptr[0] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
    9218:	20c00017 	ldw	r3,0(r4)
    921c:	18c00037 	ldwio	r3,0(r3)
    9220:	28c00005 	stb	r3,0(r5)

      if (!(status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
    9224:	108000cc 	andi	r2,r2,3
    9228:	103ff91e 	bne	r2,zero,9210 <_gp+0xffff7de8>
      ALTERA_AVALON_UART_STATUS_FE_MSK)))
      {
        return 1;
    922c:	00800044 	movi	r2,1
    9230:	f800283a 	ret

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    9234:	00800074 	movhi	r2,1
    9238:	10a51204 	addi	r2,r2,-27576
    923c:	10800017 	ldw	r2,0(r2)
    9240:	10000926 	beq	r2,zero,9268 <altera_avalon_uart_read+0x74>
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
    9244:	deffff04 	addi	sp,sp,-4
    9248:	dfc00015 	stw	ra,0(sp)
    924c:	103ee83a 	callr	r2
      }
    }
  }
  while (block);

  ALT_ERRNO = EWOULDBLOCK;
    9250:	00c002c4 	movi	r3,11
    9254:	10c00015 	stw	r3,0(r2)
 
  return 0;
    9258:	0005883a 	mov	r2,zero
}
    925c:	dfc00017 	ldw	ra,0(sp)
    9260:	dec00104 	addi	sp,sp,4
    9264:	f800283a 	ret
    9268:	00800074 	movhi	r2,1
    926c:	10a53504 	addi	r2,r2,-27436
      }
    }
  }
  while (block);

  ALT_ERRNO = EWOULDBLOCK;
    9270:	00c002c4 	movi	r3,11
    9274:	10c00015 	stw	r3,0(r2)
 
  return 0;
    9278:	0005883a 	mov	r2,zero
}
    927c:	f800283a 	ret

00009280 <altera_avalon_uart_write>:
 */

int 
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
    9280:	defffd04 	addi	sp,sp,-12
    9284:	dc400115 	stw	r17,4(sp)
    9288:	dc000015 	stw	r16,0(sp)
    928c:	dfc00215 	stw	ra,8(sp)
    9290:	3023883a 	mov	r17,r6
  int block;
  unsigned int status;
  int count;

  block = !(flags & O_NONBLOCK);
    9294:	39d0000c 	andi	r7,r7,16384
  count = len;
    9298:	3021883a 	mov	r16,r6

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
    929c:	20800017 	ldw	r2,0(r4)
    92a0:	10c00237 	ldwio	r3,8(r2)
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
    92a4:	18c0100c 	andi	r3,r3,64
    92a8:	18000526 	beq	r3,zero,92c0 <altera_avalon_uart_write+0x40>
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
    92ac:	28c00044 	addi	r3,r5,1
    92b0:	29400007 	ldb	r5,0(r5)
    92b4:	11400135 	stwio	r5,4(r2)
      count--;
    92b8:	843fffc4 	addi	r16,r16,-1
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
    92bc:	180b883a 	mov	r5,r3
      count--;
    }
  }
  while (block && count);
    92c0:	3800021e 	bne	r7,zero,92cc <altera_avalon_uart_write+0x4c>
    92c4:	803ff51e 	bne	r16,zero,929c <_gp+0xffff7e74>
    92c8:	00000b06 	br	92f8 <altera_avalon_uart_write+0x78>

  if (count)
    92cc:	80000a26 	beq	r16,zero,92f8 <altera_avalon_uart_write+0x78>
    92d0:	00800074 	movhi	r2,1
    92d4:	10a51204 	addi	r2,r2,-27576
    92d8:	10800017 	ldw	r2,0(r2)
    92dc:	10000226 	beq	r2,zero,92e8 <altera_avalon_uart_write+0x68>
    92e0:	103ee83a 	callr	r2
    92e4:	00000206 	br	92f0 <altera_avalon_uart_write+0x70>
    92e8:	00800074 	movhi	r2,1
    92ec:	10a53504 	addi	r2,r2,-27436
  {
    ALT_ERRNO = EWOULDBLOCK;
    92f0:	00c002c4 	movi	r3,11
    92f4:	10c00015 	stw	r3,0(r2)
  }

  return (len - count);
}
    92f8:	8c05c83a 	sub	r2,r17,r16
    92fc:	dfc00217 	ldw	ra,8(sp)
    9300:	dc400117 	ldw	r17,4(sp)
    9304:	dc000017 	ldw	r16,0(sp)
    9308:	dec00304 	addi	sp,sp,12
    930c:	f800283a 	ret

00009310 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    9310:	f800283a 	ret

00009314 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    9314:	3005883a 	mov	r2,r6
    9318:	f800283a 	ret

0000931c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    931c:	f800283a 	ret

00009320 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    9320:	000170fa 	wrctl	ienable,zero
    9324:	f800283a 	ret

00009328 <strlen>:
    9328:	2005883a 	mov	r2,r4
    932c:	10c00007 	ldb	r3,0(r2)
    9330:	18000226 	beq	r3,zero,933c <strlen+0x14>
    9334:	10800044 	addi	r2,r2,1
    9338:	003ffc06 	br	932c <_gp+0xffff7f04>
    933c:	1105c83a 	sub	r2,r2,r4
    9340:	f800283a 	ret
