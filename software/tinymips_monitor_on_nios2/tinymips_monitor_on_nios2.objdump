
tinymips_monitor_on_nios2.elf:     file format elf32-littlenios2
tinymips_monitor_on_nios2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x000013a0 memsz 0x000013a0 flags r-x
    LOAD off    0x000023c0 vaddr 0x000093c0 paddr 0x0000943c align 2**12
         filesz 0x0000007c memsz 0x0000007c flags rw-
    LOAD off    0x000024b8 vaddr 0x000094b8 paddr 0x000094b8 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  0000243c  2**0
                  CONTENTS
  2 .text         00001314  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000008c  00009334  00009334  00002334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000007c  000093c0  0000943c  000023c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  000094b8  000094b8  000024b8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  000094c8  000094c8  0000243c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000243c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000380  00000000  00000000  00002460  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000032fb  00000000  00000000  000027e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001533  00000000  00000000  00005adb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001446  00000000  00000000  0000700e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000008b0  00000000  00000000  00008454  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000f20  00000000  00000000  00008d04  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000fa3  00000000  00000000  00009c24  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000abc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000c8  00000000  00000000  0000abd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000c52a  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000f  00000000  00000000  0000c52d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000c53c  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000c53d  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0000c53e  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0000c542  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0000c546  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0000c54a  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000004  00000000  00000000  0000c555  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000004  00000000  00000000  0000c559  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000007  00000000  00000000  0000c55d  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000039  00000000  00000000  0000c564  2**0
                  CONTENTS, READONLY
 29 .jdi          000044b9  00000000  00000000  0000c59d  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0008a9b9  00000000  00000000  00010a56  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
00009334 l    d  .rodata	00000000 .rodata
000093c0 l    d  .rwdata	00000000 .rwdata
000094b8 l    d  .bss	00000000 .bss
000094c8 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../tinymips_monitor_on_nios2_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 memory_data.c
00000000 l    df *ABS*	00000000 dmem.c
00000000 l    df *ABS*	00000000 imem.c
00000000 l    df *ABS*	00000000 ioport.c
00000000 l    df *ABS*	00000000 prg_mode.c
00000000 l    df *ABS*	00000000 rst.c
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 hexchar_int.c
0000939a l     O .rodata	00000017 CSWTCH.1
0000938a l     O .rodata	00000010 CSWTCH.5
00000000 l    df *ABS*	00000000 hexformat.c
00000000 l    df *ABS*	00000000 monitor_command.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00009304 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 strlen.c
00008fa8 g     F .text	0000002c alt_main
00008944 g     F .text	0000000c negate_dmem_we
0000943c g       *ABS*	00000000 __flash_rwdata_start
000089fc g     F .text	00000030 imem_wd
00008aa4 g     F .text	0000007c getstr
00008a5c g     F .text	0000000c oport_rd
00008b58 g     F .text	00000074 hex2chars_to_int
00008604 g     F .text	00000094 convert_hexformat_to_memory_data
000080b0 g     F .text	0000001c do_NP
00009418 g     O .rwdata	00000004 EOF
00009188 g     F .text	00000038 alt_putstr
00009310 g     F .text	00000008 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00008950 g     F .text	00000010 assert_dmem_clk
00008c98 g     F .text	00000018 address_of_hexformat
00008c88 g     F .text	00000010 bytecount_of_hexformat
00008000 g     F .entry	0000000c __reset
00008c64 g     F .text	00000024 hex_nth_digit
00008b20 g     F .text	00000004 putstr
00008a84 g     F .text	00000010 assert_rst
00008020 g       *ABS*	00000000 __flash_exceptions_start
000094c4 g     O .bss	00000004 errno
000089d4 g     F .text	0000000c negate_imem_we
000094bc g     O .bss	00000004 alt_argv
00011418 g       *ABS*	00000000 _gp
000093c0 g     O .rwdata	00000030 alt_fd_list
00008104 g     F .text	0000002c do_WI
0000854c g     F .text	00000008 write_memory_data_to_iport_data
00008a94 g     F .text	0000000c negate_rst
00009424 g     O .rwdata	00000004 alt_max_fd
00008588 g     F .text	0000007c checksum_of_memory_data
000094c8 g       *ABS*	00000000 __bss_end
00008e6c g     F .text	00000044 alt_getchar
000081c0 g     F .text	00000038 do_OP
000089e0 g     F .text	00000010 assert_imem_clk
00008d54 g     F .text	0000003c checksum_of_hexformat
00008464 g     F .text	00000074 write_memory_data_to_dmem
000089f0 g     F .text	0000000c negate_imem_clk
000093f0 g     O .rwdata	00000028 alt_dev_null
00009300 g     F .text	00000004 alt_dcache_flush_all
0000943c g       *ABS*	00000000 __ram_rwdata_end
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory
00009428 g     O .rwdata	00000008 alt_dev_list
000093c0 g       *ABS*	00000000 __ram_rodata_end
00009420 g     O .rwdata	00000004 jtag_uart_0
000094c8 g       *ABS*	00000000 end
00009270 g     F .text	00000090 altera_avalon_uart_write
00008094 g     F .text	0000001c do_AP
0000a000 g       *ABS*	00000000 __alt_stack_pointer
000088c4 g     F .text	00000070 convert_shorthexformat_to_memory_data
00008a78 g     F .text	0000000c negate_prg_mode
00008fd4 g     F .text	0000016c alt_printf
00008020 g     F .text	0000003c _start
000091e0 g     F .text	00000004 alt_sys_init
000093c0 g       *ABS*	00000000 __ram_rwdata_start
00009334 g       *ABS*	00000000 __ram_rodata_start
0000837c g     F .text	00000074 write_memory_data_to_imem
00008554 g     F .text	00000034 read_oport_data_for_memory_data
000094c8 g       *ABS*	00000000 __alt_stack_base
00008b24 g     F .text	00000004 tx_str
00008130 g     F .text	00000038 do_RD
00008934 g     F .text	00000010 assert_dmem_we
00008cb0 g     F .text	00000010 recordtype_of_hexformat
00008698 g     F .text	0000022c convert_memory_data_to_hexformat
00008078 g     F .text	0000001c do_NR
00008b2c g     F .text	0000002c hexchar_to_int
000094b8 g       *ABS*	00000000 __bss_start
00008960 g     F .text	0000000c negate_dmem_clk
000082a0 g     F .text	000000dc main
000094b8 g     O .bss	00000004 alt_envp
000089c4 g     F .text	00000010 assert_imem_we
000084d8 g     F .text	00000074 read_dmem_for_memory_data
00008aa0 g     F .text	00000004 getchar
000089a0 g     F .text	00000024 dmem_rd
00009438 g     O .rwdata	00000004 alt_errno
00008bcc g     F .text	00000098 hex4chars_to_int
000081f8 g     F .text	000000a8 pp_memory_data
00009334 g       *ABS*	00000000 __flash_rodata_start
00008a68 g     F .text	00000010 assert_prg_mode
000091c0 g     F .text	00000020 alt_irq_init
00008b28 g     F .text	00000004 rx_str
000094c0 g     O .bss	00000004 alt_argc
0000896c g     F .text	00000034 dmem_wd
000080cc g     F .text	00000038 do_RI
00008a50 g     F .text	0000000c iport_wd
00009430 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
0000943c g       *ABS*	00000000 _edata
000094c8 g       *ABS*	00000000 _end
00008e48 g     F .text	00000024 unique
00008020 g       *ABS*	00000000 __ram_exceptions_end
00008cc0 g     F .text	00000094 data_of_hexformat
0000a000 g       *ABS*	00000000 __alt_data_end
0000941c g     O .rwdata	00000004 uart
0000800c g       .entry	00000000 _exit
00008a2c g     F .text	00000024 imem_rd
00009318 g     F .text	0000001c strlen
00009140 g     F .text	00000048 alt_putchar
000083f0 g     F .text	00000074 read_imem_for_memory_data
00008194 g     F .text	0000002c do_IP
0000930c g     F .text	00000004 alt_icache_flush_all
000091e4 g     F .text	0000008c altera_avalon_uart_read
0000805c g     F .text	0000001c do_AR
00008168 g     F .text	0000002c do_WD
00008d90 g     F .text	000000b8 monitor_command
00008eb0 g     F .text	000000f8 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at

0000800c <_exit>:
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	dee80014 	ori	sp,sp,40960
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d6850614 	ori	gp,gp,5144
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a52e14 	ori	r2,r2,38072

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e53214 	ori	r3,r3,38088

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_gp+0xffff6c2c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	0008eb00 	call	8eb0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	0008fa80 	call	8fa8 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <_gp+0xffff6c40>

0000805c <do_AR>:
  }
}

///////////////////

void do_AR() {
    805c:	deffff04 	addi	sp,sp,-4
    8060:	dfc00015 	stw	ra,0(sp)
  assert_rst();
    8064:	0008a840 	call	8a84 <assert_rst>
  tx_str(EOF);
    8068:	d1200017 	ldw	r4,-32768(gp)
}
    806c:	dfc00017 	ldw	ra,0(sp)
    8070:	dec00104 	addi	sp,sp,4

///////////////////

void do_AR() {
  assert_rst();
  tx_str(EOF);
    8074:	0008b241 	jmpi	8b24 <tx_str>

00008078 <do_NR>:
}

void do_NR() {
    8078:	deffff04 	addi	sp,sp,-4
    807c:	dfc00015 	stw	ra,0(sp)
  negate_rst();
    8080:	0008a940 	call	8a94 <negate_rst>
  tx_str(EOF);
    8084:	d1200017 	ldw	r4,-32768(gp)
}
    8088:	dfc00017 	ldw	ra,0(sp)
    808c:	dec00104 	addi	sp,sp,4
  tx_str(EOF);
}

void do_NR() {
  negate_rst();
  tx_str(EOF);
    8090:	0008b241 	jmpi	8b24 <tx_str>

00008094 <do_AP>:
}

void do_AP() {
    8094:	deffff04 	addi	sp,sp,-4
    8098:	dfc00015 	stw	ra,0(sp)
  assert_prg_mode();
    809c:	0008a680 	call	8a68 <assert_prg_mode>
  tx_str(EOF);
    80a0:	d1200017 	ldw	r4,-32768(gp)
}
    80a4:	dfc00017 	ldw	ra,0(sp)
    80a8:	dec00104 	addi	sp,sp,4
  tx_str(EOF);
}

void do_AP() {
  assert_prg_mode();
  tx_str(EOF);
    80ac:	0008b241 	jmpi	8b24 <tx_str>

000080b0 <do_NP>:
}

void do_NP() {
    80b0:	deffff04 	addi	sp,sp,-4
    80b4:	dfc00015 	stw	ra,0(sp)
  negate_prg_mode();
    80b8:	0008a780 	call	8a78 <negate_prg_mode>
  tx_str(EOF);
    80bc:	d1200017 	ldw	r4,-32768(gp)
}
    80c0:	dfc00017 	ldw	ra,0(sp)
    80c4:	dec00104 	addi	sp,sp,4
  tx_str(EOF);
}

void do_NP() {
  negate_prg_mode();
  tx_str(EOF);
    80c8:	0008b241 	jmpi	8b24 <tx_str>

000080cc <do_RI>:
}

void do_RI(const char* hf) {
    80cc:	deff3a04 	addi	sp,sp,-792
  MemoryData md;
  char s_msg[522];

  convert_shorthexformat_to_memory_data(hf, &md);
    80d0:	d9408304 	addi	r5,sp,524
void do_NP() {
  negate_prg_mode();
  tx_str(EOF);
}

void do_RI(const char* hf) {
    80d4:	dfc0c515 	stw	ra,788(sp)
  MemoryData md;
  char s_msg[522];

  convert_shorthexformat_to_memory_data(hf, &md);
    80d8:	00088c40 	call	88c4 <convert_shorthexformat_to_memory_data>
  read_imem_for_memory_data(&md);
    80dc:	d9008304 	addi	r4,sp,524
    80e0:	00083f00 	call	83f0 <read_imem_for_memory_data>
  convert_memory_data_to_hexformat(&md, s_msg);
    80e4:	d9008304 	addi	r4,sp,524
    80e8:	d80b883a 	mov	r5,sp
    80ec:	00086980 	call	8698 <convert_memory_data_to_hexformat>
  tx_str(s_msg);
    80f0:	d809883a 	mov	r4,sp
    80f4:	0008b240 	call	8b24 <tx_str>
}
    80f8:	dfc0c517 	ldw	ra,788(sp)
    80fc:	dec0c604 	addi	sp,sp,792
    8100:	f800283a 	ret

00008104 <do_WI>:

void do_WI(const char* hf) {
    8104:	deffbd04 	addi	sp,sp,-268
  MemoryData md;

  convert_hexformat_to_memory_data(hf, &md);
    8108:	d80b883a 	mov	r5,sp
  read_imem_for_memory_data(&md);
  convert_memory_data_to_hexformat(&md, s_msg);
  tx_str(s_msg);
}

void do_WI(const char* hf) {
    810c:	dfc04215 	stw	ra,264(sp)
  MemoryData md;

  convert_hexformat_to_memory_data(hf, &md);
    8110:	00086040 	call	8604 <convert_hexformat_to_memory_data>
  write_memory_data_to_imem(&md);
    8114:	d809883a 	mov	r4,sp
    8118:	000837c0 	call	837c <write_memory_data_to_imem>
  tx_str(EOF);
    811c:	d1200017 	ldw	r4,-32768(gp)
    8120:	0008b240 	call	8b24 <tx_str>
}
    8124:	dfc04217 	ldw	ra,264(sp)
    8128:	dec04304 	addi	sp,sp,268
    812c:	f800283a 	ret

00008130 <do_RD>:

void do_RD(const char* hf) {
    8130:	deff3a04 	addi	sp,sp,-792
  MemoryData md;
  char s_msg[522];

  convert_shorthexformat_to_memory_data(hf, &md);
    8134:	d9408304 	addi	r5,sp,524
  convert_hexformat_to_memory_data(hf, &md);
  write_memory_data_to_imem(&md);
  tx_str(EOF);
}

void do_RD(const char* hf) {
    8138:	dfc0c515 	stw	ra,788(sp)
  MemoryData md;
  char s_msg[522];

  convert_shorthexformat_to_memory_data(hf, &md);
    813c:	00088c40 	call	88c4 <convert_shorthexformat_to_memory_data>
  read_dmem_for_memory_data(&md);
    8140:	d9008304 	addi	r4,sp,524
    8144:	00084d80 	call	84d8 <read_dmem_for_memory_data>
  convert_memory_data_to_hexformat(&md, s_msg);
    8148:	d9008304 	addi	r4,sp,524
    814c:	d80b883a 	mov	r5,sp
    8150:	00086980 	call	8698 <convert_memory_data_to_hexformat>
  tx_str(s_msg);
    8154:	d809883a 	mov	r4,sp
    8158:	0008b240 	call	8b24 <tx_str>
}
    815c:	dfc0c517 	ldw	ra,788(sp)
    8160:	dec0c604 	addi	sp,sp,792
    8164:	f800283a 	ret

00008168 <do_WD>:

void do_WD(const char* hf) {
    8168:	deffbd04 	addi	sp,sp,-268
  MemoryData md;

  convert_hexformat_to_memory_data(hf, &md);
    816c:	d80b883a 	mov	r5,sp
  read_dmem_for_memory_data(&md);
  convert_memory_data_to_hexformat(&md, s_msg);
  tx_str(s_msg);
}

void do_WD(const char* hf) {
    8170:	dfc04215 	stw	ra,264(sp)
  MemoryData md;

  convert_hexformat_to_memory_data(hf, &md);
    8174:	00086040 	call	8604 <convert_hexformat_to_memory_data>
  write_memory_data_to_dmem(&md);
    8178:	d809883a 	mov	r4,sp
    817c:	00084640 	call	8464 <write_memory_data_to_dmem>
  tx_str(EOF);
    8180:	d1200017 	ldw	r4,-32768(gp)
    8184:	0008b240 	call	8b24 <tx_str>
}
    8188:	dfc04217 	ldw	ra,264(sp)
    818c:	dec04304 	addi	sp,sp,268
    8190:	f800283a 	ret

00008194 <do_IP>:

void do_IP(const char* hf) {
    8194:	deffbd04 	addi	sp,sp,-268
  MemoryData md;
  convert_hexformat_to_memory_data(hf, &md);
    8198:	d80b883a 	mov	r5,sp
  convert_hexformat_to_memory_data(hf, &md);
  write_memory_data_to_dmem(&md);
  tx_str(EOF);
}

void do_IP(const char* hf) {
    819c:	dfc04215 	stw	ra,264(sp)
  MemoryData md;
  convert_hexformat_to_memory_data(hf, &md);
    81a0:	00086040 	call	8604 <convert_hexformat_to_memory_data>
  write_memory_data_to_iport_data(&md);
    81a4:	d809883a 	mov	r4,sp
    81a8:	000854c0 	call	854c <write_memory_data_to_iport_data>
  tx_str(EOF);
    81ac:	d1200017 	ldw	r4,-32768(gp)
    81b0:	0008b240 	call	8b24 <tx_str>
}
    81b4:	dfc04217 	ldw	ra,264(sp)
    81b8:	dec04304 	addi	sp,sp,268
    81bc:	f800283a 	ret

000081c0 <do_OP>:

void do_OP(const char* hf) {
    81c0:	deff3a04 	addi	sp,sp,-792
  MemoryData md;
  char s_msg[522];
  convert_shorthexformat_to_memory_data(hf, &md);
    81c4:	d9408304 	addi	r5,sp,524
  convert_hexformat_to_memory_data(hf, &md);
  write_memory_data_to_iport_data(&md);
  tx_str(EOF);
}

void do_OP(const char* hf) {
    81c8:	dfc0c515 	stw	ra,788(sp)
  MemoryData md;
  char s_msg[522];
  convert_shorthexformat_to_memory_data(hf, &md);
    81cc:	00088c40 	call	88c4 <convert_shorthexformat_to_memory_data>
  read_oport_data_for_memory_data(&md);
    81d0:	d9008304 	addi	r4,sp,524
    81d4:	00085540 	call	8554 <read_oport_data_for_memory_data>
  convert_memory_data_to_hexformat(&md, s_msg);
    81d8:	d9008304 	addi	r4,sp,524
    81dc:	d80b883a 	mov	r5,sp
    81e0:	00086980 	call	8698 <convert_memory_data_to_hexformat>
  tx_str(s_msg);
    81e4:	d809883a 	mov	r4,sp
    81e8:	0008b240 	call	8b24 <tx_str>
}
    81ec:	dfc0c517 	ldw	ra,788(sp)
    81f0:	dec0c604 	addi	sp,sp,792
    81f4:	f800283a 	ret

000081f8 <pp_memory_data>:

//////////////////

void pp_memory_data(const MemoryData* md) {
    81f8:	defffc04 	addi	sp,sp,-16
    81fc:	dc000015 	stw	r16,0(sp)
    8200:	2021883a 	mov	r16,r4
  int i = 0;

  alt_printf("bytecount  = %x\r\n", md->bytecount);
    8204:	81400017 	ldw	r5,0(r16)
    8208:	01000074 	movhi	r4,1
    820c:	2124cd04 	addi	r4,r4,-27852
  tx_str(s_msg);
}

//////////////////

void pp_memory_data(const MemoryData* md) {
    8210:	dfc00315 	stw	ra,12(sp)
    8214:	dc800215 	stw	r18,8(sp)
    8218:	dc400115 	stw	r17,4(sp)
  int i = 0;

  alt_printf("bytecount  = %x\r\n", md->bytecount);
    821c:	0008fd40 	call	8fd4 <alt_printf>
  alt_printf("address    = %x\r\n", md->address);
    8220:	81400117 	ldw	r5,4(r16)
    8224:	01000074 	movhi	r4,1
    8228:	2124d204 	addi	r4,r4,-27832
    822c:	0008fd40 	call	8fd4 <alt_printf>
  alt_printf("recordtype = %x\r\n", md->recordtype);
    8230:	81400217 	ldw	r5,8(r16)
    8234:	01000074 	movhi	r4,1
    8238:	2124d704 	addi	r4,r4,-27812
    823c:	0008fd40 	call	8fd4 <alt_printf>
    8240:	84800304 	addi	r18,r16,12
  for ( i = 0; i < md->bytecount / 4; ++i) {
    8244:	0023883a 	mov	r17,zero
    8248:	80800017 	ldw	r2,0(r16)
    824c:	1000010e 	bge	r2,zero,8254 <pp_memory_data+0x5c>
    8250:	108000c4 	addi	r2,r2,3
    8254:	1005d0ba 	srai	r2,r2,2
    8258:	88800b0e 	bge	r17,r2,8288 <pp_memory_data+0x90>
    alt_printf("%x : %x\r\n", md->address + i * 4, md->data[i]);
    825c:	80800117 	ldw	r2,4(r16)
    8260:	8c4b883a 	add	r5,r17,r17
    8264:	91800017 	ldw	r6,0(r18)
    8268:	294b883a 	add	r5,r5,r5
    826c:	01000074 	movhi	r4,1
    8270:	2124dc04 	addi	r4,r4,-27792
    8274:	288b883a 	add	r5,r5,r2
    8278:	0008fd40 	call	8fd4 <alt_printf>
  int i = 0;

  alt_printf("bytecount  = %x\r\n", md->bytecount);
  alt_printf("address    = %x\r\n", md->address);
  alt_printf("recordtype = %x\r\n", md->recordtype);
  for ( i = 0; i < md->bytecount / 4; ++i) {
    827c:	8c400044 	addi	r17,r17,1
    8280:	94800104 	addi	r18,r18,4
    8284:	003ff006 	br	8248 <_gp+0xffff6e30>
    alt_printf("%x : %x\r\n", md->address + i * 4, md->data[i]);
  }
}
    8288:	dfc00317 	ldw	ra,12(sp)
    828c:	dc800217 	ldw	r18,8(sp)
    8290:	dc400117 	ldw	r17,4(sp)
    8294:	dc000017 	ldw	r16,0(sp)
    8298:	dec00404 	addi	sp,sp,16
    829c:	f800283a 	ret

000082a0 <main>:

int main()
{ 
  char r_msg[600];

  tx_str(EOF);
    82a0:	d1200017 	ldw	r4,-32768(gp)
///
void pp_memory_data(const MemoryData* md);
///

int main()
{ 
    82a4:	deff6704 	addi	sp,sp,-612
    82a8:	dc409715 	stw	r17,604(sp)
  tx_str(EOF);

  while (1) {
    rx_str(r_msg);

    switch (monitor_command(r_msg)) {
    82ac:	04400074 	movhi	r17,1
///
void pp_memory_data(const MemoryData* md);
///

int main()
{ 
    82b0:	dc009615 	stw	r16,600(sp)
    82b4:	dfc09815 	stw	ra,608(sp)
  tx_str(EOF);

  while (1) {
    rx_str(r_msg);

    switch (monitor_command(r_msg)) {
    82b8:	04000244 	movi	r16,9

int main()
{ 
  char r_msg[600];

  tx_str(EOF);
    82bc:	0008b240 	call	8b24 <tx_str>

  while (1) {
    rx_str(r_msg);

    switch (monitor_command(r_msg)) {
    82c0:	8c60bb04 	addi	r17,r17,-32020
  char r_msg[600];

  tx_str(EOF);

  while (1) {
    rx_str(r_msg);
    82c4:	d809883a 	mov	r4,sp
    82c8:	0008b280 	call	8b28 <rx_str>

    switch (monitor_command(r_msg)) {
    82cc:	d809883a 	mov	r4,sp
    82d0:	0008d900 	call	8d90 <monitor_command>
    82d4:	10bfffc4 	addi	r2,r2,-1
    82d8:	80bffa36 	bltu	r16,r2,82c4 <_gp+0xffff6eac>
    82dc:	100490ba 	slli	r2,r2,2
    82e0:	1445883a 	add	r2,r2,r17
    82e4:	10800017 	ldw	r2,0(r2)
    82e8:	1000683a 	jmp	r2
    82ec:	00008314 	movui	zero,524
    82f0:	0000831c 	xori	zero,zero,524
    82f4:	00008324 	muli	zero,zero,524
    82f8:	0000832c 	andhi	zero,zero,524
    82fc:	00008334 	movhi	zero,524
    8300:	00008340 	call	834 <__reset-0x77cc>
    8304:	0000834c 	andi	zero,zero,525
    8308:	00008358 	cmpnei	zero,zero,525
    830c:	00008364 	muli	zero,zero,525
    8310:	00008370 	cmpltui	zero,zero,525
      case MONITOR_COMMAND_AR:  // assert reset
        do_AR();          break;
    8314:	000805c0 	call	805c <do_AR>
    8318:	003fea06 	br	82c4 <_gp+0xffff6eac>
      case MONITOR_COMMAND_NR:  // negate reset
        do_NR();          break;
    831c:	00080780 	call	8078 <do_NR>
    8320:	003fe806 	br	82c4 <_gp+0xffff6eac>
      case MONITOR_COMMAND_AP:  // assert programming mode
        do_AP();          break;
    8324:	00080940 	call	8094 <do_AP>
    8328:	003fe606 	br	82c4 <_gp+0xffff6eac>
      case MONITOR_COMMAND_NP:  // negate programming mode
        do_NP();          break;
    832c:	00080b00 	call	80b0 <do_NP>
    8330:	003fe406 	br	82c4 <_gp+0xffff6eac>
      case MONITOR_COMMAND_RI:  // read instruction memory
        do_RI(&r_msg[2]); break;
    8334:	d9000084 	addi	r4,sp,2
    8338:	00080cc0 	call	80cc <do_RI>
    833c:	003fe106 	br	82c4 <_gp+0xffff6eac>
      case MONITOR_COMMAND_WI:  // write instruction memory
        do_WI(&r_msg[2]); break;
    8340:	d9000084 	addi	r4,sp,2
    8344:	00081040 	call	8104 <do_WI>
    8348:	003fde06 	br	82c4 <_gp+0xffff6eac>
      case MONITOR_COMMAND_RD:  // read data memory
        do_RD(&r_msg[2]); break;
    834c:	d9000084 	addi	r4,sp,2
    8350:	00081300 	call	8130 <do_RD>
    8354:	003fdb06 	br	82c4 <_gp+0xffff6eac>
      case MONITOR_COMMAND_WD:  // write data memory
        do_WD(&r_msg[2]); break;
    8358:	d9000084 	addi	r4,sp,2
    835c:	00081680 	call	8168 <do_WD>
    8360:	003fd806 	br	82c4 <_gp+0xffff6eac>
      case MONITOR_COMMAND_IP:  // set iport data
        do_IP(&r_msg[2]); break;
    8364:	d9000084 	addi	r4,sp,2
    8368:	00081940 	call	8194 <do_IP>
    836c:	003fd506 	br	82c4 <_gp+0xffff6eac>
      case MONITOR_COMMAND_OP:  // get oport data
        do_OP(&r_msg[2]); break;
    8370:	d9000084 	addi	r4,sp,2
    8374:	00081c00 	call	81c0 <do_OP>
    8378:	003fd206 	br	82c4 <_gp+0xffff6eac>

0000837c <write_memory_data_to_imem>:
#include "memory_data.h"


//////////////
void write_memory_data_to_imem(const MemoryData* md) {
  const int word_count = md->bytecount / 4;
    837c:	20800017 	ldw	r2,0(r4)

#include "memory_data.h"


//////////////
void write_memory_data_to_imem(const MemoryData* md) {
    8380:	defffb04 	addi	sp,sp,-20
    8384:	dfc00415 	stw	ra,16(sp)
    8388:	dcc00315 	stw	r19,12(sp)
    838c:	dc800215 	stw	r18,8(sp)
    8390:	dc400115 	stw	r17,4(sp)
    8394:	dc000015 	stw	r16,0(sp)
  const int word_count = md->bytecount / 4;
    8398:	1000010e 	bge	r2,zero,83a0 <write_memory_data_to_imem+0x24>
    839c:	108000c4 	addi	r2,r2,3
    83a0:	1023d0ba 	srai	r17,r2,2
  const int start_address = md->address;
    83a4:	24c00117 	ldw	r19,4(r4)
    83a8:	24000304 	addi	r16,r4,12
  int count = 0;

  for (count = 0; count < word_count; ++count) {
    83ac:	0025883a 	mov	r18,zero
    83b0:	9440080e 	bge	r18,r17,83d4 <write_memory_data_to_imem+0x58>
    83b4:	9489883a 	add	r4,r18,r18
    imem_wd(start_address + 4 * count, md->data[count]);
    83b8:	81400017 	ldw	r5,0(r16)
    83bc:	2109883a 	add	r4,r4,r4
    83c0:	24c9883a 	add	r4,r4,r19
    83c4:	00089fc0 	call	89fc <imem_wd>
void write_memory_data_to_imem(const MemoryData* md) {
  const int word_count = md->bytecount / 4;
  const int start_address = md->address;
  int count = 0;

  for (count = 0; count < word_count; ++count) {
    83c8:	94800044 	addi	r18,r18,1
    83cc:	84000104 	addi	r16,r16,4
    83d0:	003ff706 	br	83b0 <_gp+0xffff6f98>
    imem_wd(start_address + 4 * count, md->data[count]);
  }
}
    83d4:	dfc00417 	ldw	ra,16(sp)
    83d8:	dcc00317 	ldw	r19,12(sp)
    83dc:	dc800217 	ldw	r18,8(sp)
    83e0:	dc400117 	ldw	r17,4(sp)
    83e4:	dc000017 	ldw	r16,0(sp)
    83e8:	dec00504 	addi	sp,sp,20
    83ec:	f800283a 	ret

000083f0 <read_imem_for_memory_data>:

void read_imem_for_memory_data(MemoryData* md) {
  const int word_count = md->bytecount / 4;
    83f0:	20800017 	ldw	r2,0(r4)
  for (count = 0; count < word_count; ++count) {
    imem_wd(start_address + 4 * count, md->data[count]);
  }
}

void read_imem_for_memory_data(MemoryData* md) {
    83f4:	defffb04 	addi	sp,sp,-20
    83f8:	dfc00415 	stw	ra,16(sp)
    83fc:	dcc00315 	stw	r19,12(sp)
    8400:	dc800215 	stw	r18,8(sp)
    8404:	dc400115 	stw	r17,4(sp)
    8408:	dc000015 	stw	r16,0(sp)
  const int word_count = md->bytecount / 4;
    840c:	1000010e 	bge	r2,zero,8414 <read_imem_for_memory_data+0x24>
    8410:	108000c4 	addi	r2,r2,3
    8414:	1023d0ba 	srai	r17,r2,2
  const int start_address = md->address;
    8418:	24c00117 	ldw	r19,4(r4)
    841c:	24000304 	addi	r16,r4,12
  int count = 0;

  for (count = 0; count < word_count; ++count) {
    8420:	0025883a 	mov	r18,zero
    8424:	9440080e 	bge	r18,r17,8448 <read_imem_for_memory_data+0x58>
    8428:	9489883a 	add	r4,r18,r18
    842c:	2109883a 	add	r4,r4,r4
    md->data[count] = imem_rd(start_address + 4 * count);
    8430:	24c9883a 	add	r4,r4,r19
    8434:	0008a2c0 	call	8a2c <imem_rd>
    8438:	80800015 	stw	r2,0(r16)
void read_imem_for_memory_data(MemoryData* md) {
  const int word_count = md->bytecount / 4;
  const int start_address = md->address;
  int count = 0;

  for (count = 0; count < word_count; ++count) {
    843c:	94800044 	addi	r18,r18,1
    8440:	84000104 	addi	r16,r16,4
    8444:	003ff706 	br	8424 <_gp+0xffff700c>
    md->data[count] = imem_rd(start_address + 4 * count);
  }
}
    8448:	dfc00417 	ldw	ra,16(sp)
    844c:	dcc00317 	ldw	r19,12(sp)
    8450:	dc800217 	ldw	r18,8(sp)
    8454:	dc400117 	ldw	r17,4(sp)
    8458:	dc000017 	ldw	r16,0(sp)
    845c:	dec00504 	addi	sp,sp,20
    8460:	f800283a 	ret

00008464 <write_memory_data_to_dmem>:

//////////////
void write_memory_data_to_dmem(const MemoryData* md) {
  const int word_count = md->bytecount / 4;
    8464:	20800017 	ldw	r2,0(r4)
    md->data[count] = imem_rd(start_address + 4 * count);
  }
}

//////////////
void write_memory_data_to_dmem(const MemoryData* md) {
    8468:	defffb04 	addi	sp,sp,-20
    846c:	dfc00415 	stw	ra,16(sp)
    8470:	dcc00315 	stw	r19,12(sp)
    8474:	dc800215 	stw	r18,8(sp)
    8478:	dc400115 	stw	r17,4(sp)
    847c:	dc000015 	stw	r16,0(sp)
  const int word_count = md->bytecount / 4;
    8480:	1000010e 	bge	r2,zero,8488 <write_memory_data_to_dmem+0x24>
    8484:	108000c4 	addi	r2,r2,3
    8488:	1023d0ba 	srai	r17,r2,2
  const int start_address = md->address;
    848c:	24c00117 	ldw	r19,4(r4)
    8490:	24000304 	addi	r16,r4,12
  int count = 0;

  for (count = 0; count < word_count; ++count) {
    8494:	0025883a 	mov	r18,zero
    8498:	9440080e 	bge	r18,r17,84bc <write_memory_data_to_dmem+0x58>
    849c:	9489883a 	add	r4,r18,r18
    dmem_wd(start_address + 4 * count, md->data[count]);
    84a0:	81400017 	ldw	r5,0(r16)
    84a4:	2109883a 	add	r4,r4,r4
    84a8:	24c9883a 	add	r4,r4,r19
    84ac:	000896c0 	call	896c <dmem_wd>
void write_memory_data_to_dmem(const MemoryData* md) {
  const int word_count = md->bytecount / 4;
  const int start_address = md->address;
  int count = 0;

  for (count = 0; count < word_count; ++count) {
    84b0:	94800044 	addi	r18,r18,1
    84b4:	84000104 	addi	r16,r16,4
    84b8:	003ff706 	br	8498 <_gp+0xffff7080>
    dmem_wd(start_address + 4 * count, md->data[count]);
  }
}
    84bc:	dfc00417 	ldw	ra,16(sp)
    84c0:	dcc00317 	ldw	r19,12(sp)
    84c4:	dc800217 	ldw	r18,8(sp)
    84c8:	dc400117 	ldw	r17,4(sp)
    84cc:	dc000017 	ldw	r16,0(sp)
    84d0:	dec00504 	addi	sp,sp,20
    84d4:	f800283a 	ret

000084d8 <read_dmem_for_memory_data>:

void read_dmem_for_memory_data(MemoryData* md) {
  const int word_count = md->bytecount / 4;
    84d8:	20800017 	ldw	r2,0(r4)
  for (count = 0; count < word_count; ++count) {
    dmem_wd(start_address + 4 * count, md->data[count]);
  }
}

void read_dmem_for_memory_data(MemoryData* md) {
    84dc:	defffb04 	addi	sp,sp,-20
    84e0:	dfc00415 	stw	ra,16(sp)
    84e4:	dcc00315 	stw	r19,12(sp)
    84e8:	dc800215 	stw	r18,8(sp)
    84ec:	dc400115 	stw	r17,4(sp)
    84f0:	dc000015 	stw	r16,0(sp)
  const int word_count = md->bytecount / 4;
    84f4:	1000010e 	bge	r2,zero,84fc <read_dmem_for_memory_data+0x24>
    84f8:	108000c4 	addi	r2,r2,3
    84fc:	1023d0ba 	srai	r17,r2,2
  const int start_address = md->address;
    8500:	24c00117 	ldw	r19,4(r4)
    8504:	24000304 	addi	r16,r4,12
  int count = 0;

  for (count = 0; count < word_count; ++count) {
    8508:	0025883a 	mov	r18,zero
    850c:	9440080e 	bge	r18,r17,8530 <read_dmem_for_memory_data+0x58>
    8510:	9489883a 	add	r4,r18,r18
    8514:	2109883a 	add	r4,r4,r4
    md->data[count] = dmem_rd(start_address + 4 * count);
    8518:	24c9883a 	add	r4,r4,r19
    851c:	00089a00 	call	89a0 <dmem_rd>
    8520:	80800015 	stw	r2,0(r16)
void read_dmem_for_memory_data(MemoryData* md) {
  const int word_count = md->bytecount / 4;
  const int start_address = md->address;
  int count = 0;

  for (count = 0; count < word_count; ++count) {
    8524:	94800044 	addi	r18,r18,1
    8528:	84000104 	addi	r16,r16,4
    852c:	003ff706 	br	850c <_gp+0xffff70f4>
    md->data[count] = dmem_rd(start_address + 4 * count);
  }
}
    8530:	dfc00417 	ldw	ra,16(sp)
    8534:	dcc00317 	ldw	r19,12(sp)
    8538:	dc800217 	ldw	r18,8(sp)
    853c:	dc400117 	ldw	r17,4(sp)
    8540:	dc000017 	ldw	r16,0(sp)
    8544:	dec00504 	addi	sp,sp,20
    8548:	f800283a 	ret

0000854c <write_memory_data_to_iport_data>:

// ioport access
void write_memory_data_to_iport_data(const MemoryData* md) {
  iport_wd(md->data[0]);
    854c:	21000317 	ldw	r4,12(r4)
    8550:	0008a501 	jmpi	8a50 <iport_wd>

00008554 <read_oport_data_for_memory_data>:

void read_oport_data_for_memory_data(MemoryData* md) {
  const int bytecount = 4;
  const int address = 0;

  md->bytecount = bytecount;
    8554:	00800104 	movi	r2,4
// ioport access
void write_memory_data_to_iport_data(const MemoryData* md) {
  iport_wd(md->data[0]);
}

void read_oport_data_for_memory_data(MemoryData* md) {
    8558:	defffe04 	addi	sp,sp,-8
  const int bytecount = 4;
  const int address = 0;

  md->bytecount = bytecount;
    855c:	20800015 	stw	r2,0(r4)
  md->address = address;
    8560:	20000115 	stw	zero,4(r4)
// ioport access
void write_memory_data_to_iport_data(const MemoryData* md) {
  iport_wd(md->data[0]);
}

void read_oport_data_for_memory_data(MemoryData* md) {
    8564:	dc000015 	stw	r16,0(sp)
    8568:	dfc00115 	stw	ra,4(sp)
    856c:	2021883a 	mov	r16,r4
  const int bytecount = 4;
  const int address = 0;

  md->bytecount = bytecount;
  md->address = address;
  md->data[0] = oport_rd();
    8570:	0008a5c0 	call	8a5c <oport_rd>
    8574:	80800315 	stw	r2,12(r16)
}
    8578:	dfc00117 	ldw	ra,4(sp)
    857c:	dc000017 	ldw	r16,0(sp)
    8580:	dec00204 	addi	sp,sp,8
    8584:	f800283a 	ret

00008588 <checksum_of_memory_data>:


//////////////

char checksum_of_memory_data(const MemoryData* md) {
  const int word_count = md->bytecount / 4;
    8588:	20800017 	ldw	r2,0(r4)
    858c:	1007883a 	mov	r3,r2
    8590:	1000010e 	bge	r2,zero,8598 <checksum_of_memory_data+0x10>
    8594:	10c000c4 	addi	r3,r2,3
    8598:	180dd0ba 	srai	r6,r3,2
  int count = 0;
  char sum = 0;
  sum += (char)(0xff & md->bytecount);
  sum += (char)(0x00ff & md->address);
    859c:	20c00117 	ldw	r3,4(r4)
  sum += (char)((0xff00 & md->address) >> 8);
  sum += (0xf & md->recordtype);
    85a0:	21400217 	ldw	r5,8(r4)
  for (count = 0; count < word_count; ++count) {
    85a4:	000f883a 	mov	r7,zero
    85a8:	1885883a 	add	r2,r3,r2
  const int word_count = md->bytecount / 4;
  int count = 0;
  char sum = 0;
  sum += (char)(0xff & md->bytecount);
  sum += (char)(0x00ff & md->address);
  sum += (char)((0xff00 & md->address) >> 8);
    85ac:	18ffc00c 	andi	r3,r3,65280
    85b0:	1807d23a 	srai	r3,r3,8
  sum += (0xf & md->recordtype);
    85b4:	294003cc 	andi	r5,r5,15
    85b8:	1145883a 	add	r2,r2,r5
    85bc:	10c5883a 	add	r2,r2,r3
    85c0:	21000304 	addi	r4,r4,12
  for (count = 0; count < word_count; ++count) {
    85c4:	39800d0e 	bge	r7,r6,85fc <checksum_of_memory_data+0x74>
    sum += (char)( 0x000000ff & md->data[count]);
    85c8:	21400017 	ldw	r5,0(r4)
  char sum = 0;
  sum += (char)(0xff & md->bytecount);
  sum += (char)(0x00ff & md->address);
  sum += (char)((0xff00 & md->address) >> 8);
  sum += (0xf & md->recordtype);
  for (count = 0; count < word_count; ++count) {
    85cc:	39c00044 	addi	r7,r7,1
    85d0:	21000104 	addi	r4,r4,4
    sum += (char)( 0x000000ff & md->data[count]);
    sum += (char)((0x0000ff00 & md->data[count]) >> 8);
    85d4:	28ffc00c 	andi	r3,r5,65280
    85d8:	1807d23a 	srai	r3,r3,8
  sum += (char)(0xff & md->bytecount);
  sum += (char)(0x00ff & md->address);
  sum += (char)((0xff00 & md->address) >> 8);
  sum += (0xf & md->recordtype);
  for (count = 0; count < word_count; ++count) {
    sum += (char)( 0x000000ff & md->data[count]);
    85dc:	2885883a 	add	r2,r5,r2
    sum += (char)((0x0000ff00 & md->data[count]) >> 8);
    85e0:	10c5883a 	add	r2,r2,r3
    sum += (char)((0x00ff0000 & md->data[count]) >> 16);
    85e4:	28c03fec 	andhi	r3,r5,255
    85e8:	1807d43a 	srai	r3,r3,16
    85ec:	10c7883a 	add	r3,r2,r3
    sum += (char)((0xff000000 & md->data[count]) >> 24);
    85f0:	2804d63a 	srli	r2,r5,24
    85f4:	1885883a 	add	r2,r3,r2
    85f8:	003ff206 	br	85c4 <_gp+0xffff71ac>
  }
  return (char)(0xff & (~sum + 1));
}
    85fc:	0085c83a 	sub	r2,zero,r2
    8600:	f800283a 	ret

00008604 <convert_hexformat_to_memory_data>:

///////////////////

void convert_hexformat_to_memory_data(const char* hf, MemoryData* md) {
    8604:	defffb04 	addi	sp,sp,-20
    8608:	dfc00415 	stw	ra,16(sp)
    860c:	dcc00315 	stw	r19,12(sp)
    8610:	dc800215 	stw	r18,8(sp)
    8614:	2027883a 	mov	r19,r4
    8618:	dc400115 	stw	r17,4(sp)
    861c:	dc000015 	stw	r16,0(sp)
    8620:	2821883a 	mov	r16,r5
  int i;

  md->bytecount  = bytecount_of_hexformat(hf);
    8624:	0008c880 	call	8c88 <bytecount_of_hexformat>
  md->address    = address_of_hexformat(hf);
    8628:	9809883a 	mov	r4,r19
///////////////////

void convert_hexformat_to_memory_data(const char* hf, MemoryData* md) {
  int i;

  md->bytecount  = bytecount_of_hexformat(hf);
    862c:	80800015 	stw	r2,0(r16)
  md->address    = address_of_hexformat(hf);
    8630:	0008c980 	call	8c98 <address_of_hexformat>
    8634:	80800115 	stw	r2,4(r16)
  md->recordtype = recordtype_of_hexformat(hf);
    8638:	9809883a 	mov	r4,r19
    863c:	0008cb00 	call	8cb0 <recordtype_of_hexformat>
    8640:	80800215 	stw	r2,8(r16)
    8644:	84800304 	addi	r18,r16,12
  for (i = 0; i < md->bytecount / 4; ++i) {
    8648:	0023883a 	mov	r17,zero
    864c:	80800017 	ldw	r2,0(r16)
    8650:	1000010e 	bge	r2,zero,8658 <convert_hexformat_to_memory_data+0x54>
    8654:	108000c4 	addi	r2,r2,3
    8658:	1005d0ba 	srai	r2,r2,2
    865c:	8880070e 	bge	r17,r2,867c <convert_hexformat_to_memory_data+0x78>
    md->data[i] = data_of_hexformat(hf, i);
    8660:	880b883a 	mov	r5,r17
    8664:	9809883a 	mov	r4,r19
    8668:	0008cc00 	call	8cc0 <data_of_hexformat>
    866c:	90800015 	stw	r2,0(r18)
  int i;

  md->bytecount  = bytecount_of_hexformat(hf);
  md->address    = address_of_hexformat(hf);
  md->recordtype = recordtype_of_hexformat(hf);
  for (i = 0; i < md->bytecount / 4; ++i) {
    8670:	8c400044 	addi	r17,r17,1
    8674:	94800104 	addi	r18,r18,4
    8678:	003ff406 	br	864c <_gp+0xffff7234>
    md->data[i] = data_of_hexformat(hf, i);
  }
}
    867c:	dfc00417 	ldw	ra,16(sp)
    8680:	dcc00317 	ldw	r19,12(sp)
    8684:	dc800217 	ldw	r18,8(sp)
    8688:	dc400117 	ldw	r17,4(sp)
    868c:	dc000017 	ldw	r16,0(sp)
    8690:	dec00504 	addi	sp,sp,20
    8694:	f800283a 	ret

00008698 <convert_memory_data_to_hexformat>:

void convert_memory_data_to_hexformat(const MemoryData* md, char* hf) {
    8698:	defff704 	addi	sp,sp,-36
    869c:	dfc00815 	stw	ra,32(sp)
    86a0:	ddc00715 	stw	r23,28(sp)
    86a4:	dd800615 	stw	r22,24(sp)
    86a8:	dd400515 	stw	r21,20(sp)
    86ac:	dd000415 	stw	r20,16(sp)
    86b0:	dcc00315 	stw	r19,12(sp)
    86b4:	dc800215 	stw	r18,8(sp)
    86b8:	dc400115 	stw	r17,4(sp)
    86bc:	dc000015 	stw	r16,0(sp)
    86c0:	2023883a 	mov	r17,r4
    86c4:	2821883a 	mov	r16,r5
  int i = 0;
  int checksum = (int)checksum_of_memory_data(md);
    86c8:	00085880 	call	8588 <checksum_of_memory_data>
    86cc:	14c03fcc 	andi	r19,r2,255

  hf[0] = ':';
    86d0:	00800e84 	movi	r2,58
    86d4:	80800005 	stb	r2,0(r16)
  // bytecount
  hf[1] = hex_nth_digit(md->bytecount, 1);
    86d8:	89000017 	ldw	r4,0(r17)
    86dc:	01400044 	movi	r5,1
  }
}

void convert_memory_data_to_hexformat(const MemoryData* md, char* hf) {
  int i = 0;
  int checksum = (int)checksum_of_memory_data(md);
    86e0:	9cc0201c 	xori	r19,r19,128

  hf[0] = ':';
  // bytecount
  hf[1] = hex_nth_digit(md->bytecount, 1);
    86e4:	0008c640 	call	8c64 <hex_nth_digit>
    86e8:	80800045 	stb	r2,1(r16)
  hf[2] = hex_nth_digit(md->bytecount, 0);
    86ec:	89000017 	ldw	r4,0(r17)
    86f0:	000b883a 	mov	r5,zero
  }
}

void convert_memory_data_to_hexformat(const MemoryData* md, char* hf) {
  int i = 0;
  int checksum = (int)checksum_of_memory_data(md);
    86f4:	9cffe004 	addi	r19,r19,-128

  hf[0] = ':';
  // bytecount
  hf[1] = hex_nth_digit(md->bytecount, 1);
  hf[2] = hex_nth_digit(md->bytecount, 0);
    86f8:	0008c640 	call	8c64 <hex_nth_digit>
    86fc:	80800085 	stb	r2,2(r16)
  // address
  hf[3] = hex_nth_digit(md->address, 3);
    8700:	89000117 	ldw	r4,4(r17)
    8704:	014000c4 	movi	r5,3
    8708:	8c800304 	addi	r18,r17,12
    870c:	0008c640 	call	8c64 <hex_nth_digit>
    8710:	808000c5 	stb	r2,3(r16)
  hf[4] = hex_nth_digit(md->address, 2);
    8714:	89000117 	ldw	r4,4(r17)
    8718:	01400084 	movi	r5,2
    871c:	85800244 	addi	r22,r16,9
    8720:	0008c640 	call	8c64 <hex_nth_digit>
    8724:	80800105 	stb	r2,4(r16)
  hf[5] = hex_nth_digit(md->address, 1);
    8728:	89000117 	ldw	r4,4(r17)
    872c:	01400044 	movi	r5,1
    8730:	8029883a 	mov	r20,r16
    8734:	0008c640 	call	8c64 <hex_nth_digit>
    8738:	80800145 	stb	r2,5(r16)
  hf[6] = hex_nth_digit(md->address, 0);
    873c:	89000117 	ldw	r4,4(r17)
    8740:	000b883a 	mov	r5,zero
    8744:	85c00284 	addi	r23,r16,10
    8748:	0008c640 	call	8c64 <hex_nth_digit>
    874c:	80800185 	stb	r2,6(r16)
  // recordtype
  hf[7] = hex_nth_digit(md->recordtype, 1);
    8750:	89000217 	ldw	r4,8(r17)
    8754:	01400044 	movi	r5,1
  hf[8] = hex_nth_digit(md->recordtype, 0);
  // data
  for (i = 0; i < md->bytecount / 4; ++i) {
    8758:	002b883a 	mov	r21,zero
  hf[3] = hex_nth_digit(md->address, 3);
  hf[4] = hex_nth_digit(md->address, 2);
  hf[5] = hex_nth_digit(md->address, 1);
  hf[6] = hex_nth_digit(md->address, 0);
  // recordtype
  hf[7] = hex_nth_digit(md->recordtype, 1);
    875c:	0008c640 	call	8c64 <hex_nth_digit>
    8760:	808001c5 	stb	r2,7(r16)
  hf[8] = hex_nth_digit(md->recordtype, 0);
    8764:	89000217 	ldw	r4,8(r17)
    8768:	000b883a 	mov	r5,zero
    876c:	0008c640 	call	8c64 <hex_nth_digit>
    8770:	80800205 	stb	r2,8(r16)
  // data
  for (i = 0; i < md->bytecount / 4; ++i) {
    8774:	88c00017 	ldw	r3,0(r17)
    8778:	a5000204 	addi	r20,r20,8
    877c:	1805883a 	mov	r2,r3
    8780:	1800010e 	bge	r3,zero,8788 <convert_memory_data_to_hexformat+0xf0>
    8784:	188000c4 	addi	r2,r3,3
    8788:	1005d0ba 	srai	r2,r2,2
    878c:	a880250e 	bge	r21,r2,8824 <convert_memory_data_to_hexformat+0x18c>
    hf[9 + 8 * i + 0] = hex_nth_digit(md->data[i], 7);
    8790:	91000017 	ldw	r4,0(r18)
    8794:	014001c4 	movi	r5,7
  hf[6] = hex_nth_digit(md->address, 0);
  // recordtype
  hf[7] = hex_nth_digit(md->recordtype, 1);
  hf[8] = hex_nth_digit(md->recordtype, 0);
  // data
  for (i = 0; i < md->bytecount / 4; ++i) {
    8798:	ad400044 	addi	r21,r21,1
    hf[9 + 8 * i + 0] = hex_nth_digit(md->data[i], 7);
    879c:	0008c640 	call	8c64 <hex_nth_digit>
    87a0:	b0800005 	stb	r2,0(r22)
    hf[9 + 8 * i + 1] = hex_nth_digit(md->data[i], 6);
    87a4:	91000017 	ldw	r4,0(r18)
    87a8:	01400184 	movi	r5,6
    87ac:	94800104 	addi	r18,r18,4
    87b0:	0008c640 	call	8c64 <hex_nth_digit>
    87b4:	b8800005 	stb	r2,0(r23)
    hf[9 + 8 * i + 2] = hex_nth_digit(md->data[i], 5);
    87b8:	913fff17 	ldw	r4,-4(r18)
    87bc:	01400144 	movi	r5,5
    87c0:	b5800204 	addi	r22,r22,8
    87c4:	0008c640 	call	8c64 <hex_nth_digit>
    87c8:	a08000c5 	stb	r2,3(r20)
    hf[9 + 8 * i + 3] = hex_nth_digit(md->data[i], 4);
    87cc:	913fff17 	ldw	r4,-4(r18)
    87d0:	01400104 	movi	r5,4
    87d4:	bdc00204 	addi	r23,r23,8
    87d8:	0008c640 	call	8c64 <hex_nth_digit>
    87dc:	a0800105 	stb	r2,4(r20)
    hf[9 + 8 * i + 4] = hex_nth_digit(md->data[i], 3);
    87e0:	913fff17 	ldw	r4,-4(r18)
    87e4:	014000c4 	movi	r5,3
    87e8:	0008c640 	call	8c64 <hex_nth_digit>
    87ec:	a0800145 	stb	r2,5(r20)
    hf[9 + 8 * i + 5] = hex_nth_digit(md->data[i], 2);
    87f0:	913fff17 	ldw	r4,-4(r18)
    87f4:	01400084 	movi	r5,2
    87f8:	0008c640 	call	8c64 <hex_nth_digit>
    87fc:	a0800185 	stb	r2,6(r20)
    hf[9 + 8 * i + 6] = hex_nth_digit(md->data[i], 1);
    8800:	913fff17 	ldw	r4,-4(r18)
    8804:	01400044 	movi	r5,1
    8808:	0008c640 	call	8c64 <hex_nth_digit>
    880c:	a08001c5 	stb	r2,7(r20)
    hf[9 + 8 * i + 7] = hex_nth_digit(md->data[i], 0);
    8810:	913fff17 	ldw	r4,-4(r18)
    8814:	000b883a 	mov	r5,zero
    8818:	0008c640 	call	8c64 <hex_nth_digit>
    881c:	a0800205 	stb	r2,8(r20)
    8820:	003fd406 	br	8774 <_gp+0xffff735c>
  }
  // checksum
  hf[9 + 2 * md->bytecount + 0] = hex_nth_digit(checksum, 1);
    8824:	18c7883a 	add	r3,r3,r3
    8828:	1c800244 	addi	r18,r3,9
    882c:	9809883a 	mov	r4,r19
    8830:	01400044 	movi	r5,1
    8834:	0008c640 	call	8c64 <hex_nth_digit>
    8838:	84a5883a 	add	r18,r16,r18
    883c:	90800005 	stb	r2,0(r18)
  hf[9 + 2 * md->bytecount + 1] = hex_nth_digit(checksum, 0);
    8840:	88c00017 	ldw	r3,0(r17)
    8844:	9809883a 	mov	r4,r19
    8848:	000b883a 	mov	r5,zero
    884c:	18c7883a 	add	r3,r3,r3
    8850:	1c800284 	addi	r18,r3,10
    8854:	84a5883a 	add	r18,r16,r18
    8858:	0008c640 	call	8c64 <hex_nth_digit>
    885c:	90800005 	stb	r2,0(r18)
  // end
  hf[9 + 2 * md->bytecount + 2] = '\r';
    8860:	88800017 	ldw	r2,0(r17)
    8864:	00c00344 	movi	r3,13
    8868:	1085883a 	add	r2,r2,r2
    886c:	8085883a 	add	r2,r16,r2
    8870:	10c002c5 	stb	r3,11(r2)
  hf[9 + 2 * md->bytecount + 3] = '\n';
    8874:	88800017 	ldw	r2,0(r17)
    8878:	00c00284 	movi	r3,10
    887c:	1085883a 	add	r2,r2,r2
    8880:	8085883a 	add	r2,r16,r2
    8884:	10c00305 	stb	r3,12(r2)
  hf[9 + 2 * md->bytecount + 4] = '\0';
    8888:	88800017 	ldw	r2,0(r17)
    888c:	1085883a 	add	r2,r2,r2
    8890:	80a1883a 	add	r16,r16,r2
    8894:	80000345 	stb	zero,13(r16)
}
    8898:	dfc00817 	ldw	ra,32(sp)
    889c:	ddc00717 	ldw	r23,28(sp)
    88a0:	dd800617 	ldw	r22,24(sp)
    88a4:	dd400517 	ldw	r21,20(sp)
    88a8:	dd000417 	ldw	r20,16(sp)
    88ac:	dcc00317 	ldw	r19,12(sp)
    88b0:	dc800217 	ldw	r18,8(sp)
    88b4:	dc400117 	ldw	r17,4(sp)
    88b8:	dc000017 	ldw	r16,0(sp)
    88bc:	dec00904 	addi	sp,sp,36
    88c0:	f800283a 	ret

000088c4 <convert_shorthexformat_to_memory_data>:

void convert_shorthexformat_to_memory_data(const char* hf, MemoryData* md) {
    88c4:	defffd04 	addi	sp,sp,-12
    88c8:	dfc00215 	stw	ra,8(sp)
    88cc:	dc400115 	stw	r17,4(sp)
    88d0:	dc000015 	stw	r16,0(sp)
    88d4:	2023883a 	mov	r17,r4
    88d8:	2821883a 	mov	r16,r5
  int i;

  md->bytecount  = bytecount_of_hexformat(hf);
    88dc:	0008c880 	call	8c88 <bytecount_of_hexformat>
    88e0:	80800015 	stw	r2,0(r16)
  md->address    = address_of_hexformat(hf);
    88e4:	8809883a 	mov	r4,r17
    88e8:	0008c980 	call	8c98 <address_of_hexformat>
    88ec:	80800115 	stw	r2,4(r16)
  md->recordtype = DATA_TYPE;
  for (i = 0; i < md->bytecount / 4; ++i) {
    88f0:	80800017 	ldw	r2,0(r16)
void convert_shorthexformat_to_memory_data(const char* hf, MemoryData* md) {
  int i;

  md->bytecount  = bytecount_of_hexformat(hf);
  md->address    = address_of_hexformat(hf);
  md->recordtype = DATA_TYPE;
    88f4:	80000215 	stw	zero,8(r16)
  for (i = 0; i < md->bytecount / 4; ++i) {
    88f8:	1000010e 	bge	r2,zero,8900 <convert_shorthexformat_to_memory_data+0x3c>
    88fc:	108000c4 	addi	r2,r2,3
    8900:	1005d0ba 	srai	r2,r2,2
    8904:	84000304 	addi	r16,r16,12
    8908:	0007883a 	mov	r3,zero
    890c:	1880040e 	bge	r3,r2,8920 <convert_shorthexformat_to_memory_data+0x5c>
    md->data[i] = 0;
    8910:	80000015 	stw	zero,0(r16)
  int i;

  md->bytecount  = bytecount_of_hexformat(hf);
  md->address    = address_of_hexformat(hf);
  md->recordtype = DATA_TYPE;
  for (i = 0; i < md->bytecount / 4; ++i) {
    8914:	18c00044 	addi	r3,r3,1
    8918:	84000104 	addi	r16,r16,4
    891c:	003ffb06 	br	890c <_gp+0xffff74f4>
    md->data[i] = 0;
  }
}
    8920:	dfc00217 	ldw	ra,8(sp)
    8924:	dc400117 	ldw	r17,4(sp)
    8928:	dc000017 	ldw	r16,0(sp)
    892c:	dec00304 	addi	sp,sp,12
    8930:	f800283a 	ret

00008934 <assert_dmem_we>:
#include "altera_avalon_pio_regs.h"

#include "dmem.h"

void assert_dmem_we() {
  IOWR_ALTERA_AVALON_PIO_DATA(DMEM_WE_BASE, 1);
    8934:	00804004 	movi	r2,256
    8938:	00c00044 	movi	r3,1
    893c:	10c00035 	stwio	r3,0(r2)
    8940:	f800283a 	ret

00008944 <negate_dmem_we>:
};

void negate_dmem_we() {
  IOWR_ALTERA_AVALON_PIO_DATA(DMEM_WE_BASE, 0);
    8944:	00804004 	movi	r2,256
    8948:	10000035 	stwio	zero,0(r2)
    894c:	f800283a 	ret

00008950 <assert_dmem_clk>:
};

void assert_dmem_clk() {
  IOWR_ALTERA_AVALON_PIO_DATA(DMEM_CLK_BASE, 1);
    8950:	00804404 	movi	r2,272
    8954:	00c00044 	movi	r3,1
    8958:	10c00035 	stwio	r3,0(r2)
    895c:	f800283a 	ret

00008960 <negate_dmem_clk>:
};

void negate_dmem_clk() {
  IOWR_ALTERA_AVALON_PIO_DATA(DMEM_CLK_BASE, 0);
    8960:	00804404 	movi	r2,272
    8964:	10000035 	stwio	zero,0(r2)
    8968:	f800283a 	ret

0000896c <dmem_wd>:
};

////////
void dmem_wd(int addr, int data) {
  IOWR_ALTERA_AVALON_PIO_DATA(DMEM_ADDR_BASE, addr);
    896c:	00804804 	movi	r2,288
    8970:	11000035 	stwio	r4,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(DMEM_WD_BASE, data);
    8974:	00805004 	movi	r2,320
    8978:	11400035 	stwio	r5,0(r2)
#include "altera_avalon_pio_regs.h"

#include "dmem.h"

void assert_dmem_we() {
  IOWR_ALTERA_AVALON_PIO_DATA(DMEM_WE_BASE, 1);
    897c:	00c00044 	movi	r3,1
    8980:	00804004 	movi	r2,256
    8984:	10c00035 	stwio	r3,0(r2)
void negate_dmem_we() {
  IOWR_ALTERA_AVALON_PIO_DATA(DMEM_WE_BASE, 0);
};

void assert_dmem_clk() {
  IOWR_ALTERA_AVALON_PIO_DATA(DMEM_CLK_BASE, 1);
    8988:	01004404 	movi	r4,272
    898c:	20c00035 	stwio	r3,0(r4)
};

void negate_dmem_clk() {
  IOWR_ALTERA_AVALON_PIO_DATA(DMEM_CLK_BASE, 0);
    8990:	0007883a 	mov	r3,zero
    8994:	20c00035 	stwio	r3,0(r4)
void assert_dmem_we() {
  IOWR_ALTERA_AVALON_PIO_DATA(DMEM_WE_BASE, 1);
};

void negate_dmem_we() {
  IOWR_ALTERA_AVALON_PIO_DATA(DMEM_WE_BASE, 0);
    8998:	10c00035 	stwio	r3,0(r2)
    899c:	f800283a 	ret

000089a0 <dmem_rd>:
  negate_dmem_clk();
  negate_dmem_we();
}

int dmem_rd(int addr) {
  IOWR_ALTERA_AVALON_PIO_DATA(DMEM_ADDR_BASE, addr);
    89a0:	00804804 	movi	r2,288
    89a4:	11000035 	stwio	r4,0(r2)
void negate_dmem_we() {
  IOWR_ALTERA_AVALON_PIO_DATA(DMEM_WE_BASE, 0);
};

void assert_dmem_clk() {
  IOWR_ALTERA_AVALON_PIO_DATA(DMEM_CLK_BASE, 1);
    89a8:	00804404 	movi	r2,272
    89ac:	00c00044 	movi	r3,1
    89b0:	10c00035 	stwio	r3,0(r2)
};

void negate_dmem_clk() {
  IOWR_ALTERA_AVALON_PIO_DATA(DMEM_CLK_BASE, 0);
    89b4:	10000035 	stwio	zero,0(r2)
int dmem_rd(int addr) {
  IOWR_ALTERA_AVALON_PIO_DATA(DMEM_ADDR_BASE, addr);
  assert_dmem_clk();
  negate_dmem_clk();
  return IORD_ALTERA_AVALON_PIO_DATA(DMEM_RD_BASE);
}
    89b8:	00804c04 	movi	r2,304
    89bc:	10800037 	ldwio	r2,0(r2)
    89c0:	f800283a 	ret

000089c4 <assert_imem_we>:
#include "altera_avalon_pio_regs.h"

#include "imem.h"

void assert_imem_we() {
  IOWR_ALTERA_AVALON_PIO_DATA(IMEM_WE_BASE, 1);
    89c4:	0005883a 	mov	r2,zero
    89c8:	00c00044 	movi	r3,1
    89cc:	10c00035 	stwio	r3,0(r2)
    89d0:	f800283a 	ret

000089d4 <negate_imem_we>:
};

void negate_imem_we() {
  IOWR_ALTERA_AVALON_PIO_DATA(IMEM_WE_BASE, 0);
    89d4:	0005883a 	mov	r2,zero
    89d8:	10800035 	stwio	r2,0(r2)
    89dc:	f800283a 	ret

000089e0 <assert_imem_clk>:
};

void assert_imem_clk() {
  IOWR_ALTERA_AVALON_PIO_DATA(IMEM_CLK_BASE, 1);
    89e0:	00800404 	movi	r2,16
    89e4:	00c00044 	movi	r3,1
    89e8:	10c00035 	stwio	r3,0(r2)
    89ec:	f800283a 	ret

000089f0 <negate_imem_clk>:
};

void negate_imem_clk() {
  IOWR_ALTERA_AVALON_PIO_DATA(IMEM_CLK_BASE, 0);
    89f0:	00800404 	movi	r2,16
    89f4:	10000035 	stwio	zero,0(r2)
    89f8:	f800283a 	ret

000089fc <imem_wd>:
};

////////
void imem_wd(int addr, int data) {
  IOWR_ALTERA_AVALON_PIO_DATA(IMEM_ADDR_BASE, addr);
    89fc:	00800804 	movi	r2,32
    8a00:	11000035 	stwio	r4,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(IMEM_WD_BASE, data);
    8a04:	00801004 	movi	r2,64
    8a08:	11400035 	stwio	r5,0(r2)
#include "altera_avalon_pio_regs.h"

#include "imem.h"

void assert_imem_we() {
  IOWR_ALTERA_AVALON_PIO_DATA(IMEM_WE_BASE, 1);
    8a0c:	01000044 	movi	r4,1
    8a10:	0005883a 	mov	r2,zero
    8a14:	11000035 	stwio	r4,0(r2)
void negate_imem_we() {
  IOWR_ALTERA_AVALON_PIO_DATA(IMEM_WE_BASE, 0);
};

void assert_imem_clk() {
  IOWR_ALTERA_AVALON_PIO_DATA(IMEM_CLK_BASE, 1);
    8a18:	00c00404 	movi	r3,16
    8a1c:	19000035 	stwio	r4,0(r3)
};

void negate_imem_clk() {
  IOWR_ALTERA_AVALON_PIO_DATA(IMEM_CLK_BASE, 0);
    8a20:	18800035 	stwio	r2,0(r3)
void assert_imem_we() {
  IOWR_ALTERA_AVALON_PIO_DATA(IMEM_WE_BASE, 1);
};

void negate_imem_we() {
  IOWR_ALTERA_AVALON_PIO_DATA(IMEM_WE_BASE, 0);
    8a24:	10800035 	stwio	r2,0(r2)
    8a28:	f800283a 	ret

00008a2c <imem_rd>:
  negate_imem_clk();
  negate_imem_we();
}

int imem_rd(int addr) {
  IOWR_ALTERA_AVALON_PIO_DATA(IMEM_ADDR_BASE, addr);
    8a2c:	00800804 	movi	r2,32
    8a30:	11000035 	stwio	r4,0(r2)
void negate_imem_we() {
  IOWR_ALTERA_AVALON_PIO_DATA(IMEM_WE_BASE, 0);
};

void assert_imem_clk() {
  IOWR_ALTERA_AVALON_PIO_DATA(IMEM_CLK_BASE, 1);
    8a34:	00800404 	movi	r2,16
    8a38:	00c00044 	movi	r3,1
    8a3c:	10c00035 	stwio	r3,0(r2)
};

void negate_imem_clk() {
  IOWR_ALTERA_AVALON_PIO_DATA(IMEM_CLK_BASE, 0);
    8a40:	10000035 	stwio	zero,0(r2)
int imem_rd(int addr) {
  IOWR_ALTERA_AVALON_PIO_DATA(IMEM_ADDR_BASE, addr);
  assert_imem_clk();
  negate_imem_clk();
  return IORD_ALTERA_AVALON_PIO_DATA(IMEM_RD_BASE);
}
    8a44:	00800c04 	movi	r2,48
    8a48:	10800037 	ldwio	r2,0(r2)
    8a4c:	f800283a 	ret

00008a50 <iport_wd>:
#include "system.h"
#include "altera_avalon_pio_regs.h"
#include "ioport.h"

void iport_wd(int data) {
  IOWR_ALTERA_AVALON_PIO_DATA(IPORT3_DATA_BASE, data);
    8a50:	0080c004 	movi	r2,768
    8a54:	11000035 	stwio	r4,0(r2)
    8a58:	f800283a 	ret

00008a5c <oport_rd>:
}

int oport_rd() {
  return IORD_ALTERA_AVALON_PIO_DATA(OPORT3_DATA_BASE);
}
    8a5c:	0080c404 	movi	r2,784
    8a60:	10800037 	ldwio	r2,0(r2)
    8a64:	f800283a 	ret

00008a68 <assert_prg_mode>:
#include "altera_avalon_pio_regs.h"

#include "prg_mode.h"

void assert_prg_mode() {
  IOWR_ALTERA_AVALON_PIO_DATA(PRG_MODE_BASE, 1);
    8a68:	00808004 	movi	r2,512
    8a6c:	00c00044 	movi	r3,1
    8a70:	10c00035 	stwio	r3,0(r2)
    8a74:	f800283a 	ret

00008a78 <negate_prg_mode>:
}

void negate_prg_mode() {
  IOWR_ALTERA_AVALON_PIO_DATA(PRG_MODE_BASE, 0);
    8a78:	00808004 	movi	r2,512
    8a7c:	10000035 	stwio	zero,0(r2)
    8a80:	f800283a 	ret

00008a84 <assert_rst>:
#include "altera_avalon_pio_regs.h"

#include "rst.h"

void assert_rst() {
  IOWR_ALTERA_AVALON_PIO_DATA(RST_BASE, 1);
    8a84:	00808404 	movi	r2,528
    8a88:	00c00044 	movi	r3,1
    8a8c:	10c00035 	stwio	r3,0(r2)
    8a90:	f800283a 	ret

00008a94 <negate_rst>:
}
void negate_rst() {
  IOWR_ALTERA_AVALON_PIO_DATA(RST_BASE, 0);
    8a94:	00808404 	movi	r2,528
    8a98:	10000035 	stwio	zero,0(r2)
    8a9c:	f800283a 	ret

00008aa0 <getchar>:
#include "system.h"
#include "uart.h"

int getchar() {
  int c;
  c = alt_getchar();
    8aa0:	0008e6c1 	jmpi	8e6c <alt_getchar>

00008aa4 <getstr>:
  //alt_putchar(c); // echo back (remove if not needed)
  return c;
}

void getstr(char* str) { // read one line, skip '_'
    8aa4:	defffa04 	addi	sp,sp,-24
    8aa8:	dd000415 	stw	r20,16(sp)
    8aac:	dcc00315 	stw	r19,12(sp)
    8ab0:	dc800215 	stw	r18,8(sp)
    8ab4:	dc400115 	stw	r17,4(sp)
    8ab8:	dc000015 	stw	r16,0(sp)
    8abc:	dfc00515 	stw	ra,20(sp)
    8ac0:	2023883a 	mov	r17,r4
  int c;
  int index;

  index = 0;
    8ac4:	0021883a 	mov	r16,zero
#include "system.h"
#include "uart.h"

int getchar() {
  int c;
  c = alt_getchar();
    8ac8:	0008e6c0 	call	8e6c <alt_getchar>
  int c;
  int index;

  index = 0;
  c = getchar();
  while(!(c == '\r' || c == '\n')) {
    8acc:	04c00344 	movi	r19,13
    8ad0:	04800284 	movi	r18,10
    if (c != '_') {
    8ad4:	050017c4 	movi	r20,95
  int c;
  int index;

  index = 0;
  c = getchar();
  while(!(c == '\r' || c == '\n')) {
    8ad8:	14c00a1e 	bne	r2,r19,8b04 <getstr+0x60>
      str[index] = (char)c;
      index++;
    }
    c = getchar();
  }
  str[index] = '\0';
    8adc:	8c21883a 	add	r16,r17,r16
    8ae0:	80000005 	stb	zero,0(r16)
  return;
}
    8ae4:	dfc00517 	ldw	ra,20(sp)
    8ae8:	dd000417 	ldw	r20,16(sp)
    8aec:	dcc00317 	ldw	r19,12(sp)
    8af0:	dc800217 	ldw	r18,8(sp)
    8af4:	dc400117 	ldw	r17,4(sp)
    8af8:	dc000017 	ldw	r16,0(sp)
    8afc:	dec00604 	addi	sp,sp,24
    8b00:	f800283a 	ret
  int c;
  int index;

  index = 0;
  c = getchar();
  while(!(c == '\r' || c == '\n')) {
    8b04:	14bff526 	beq	r2,r18,8adc <_gp+0xffff76c4>
    if (c != '_') {
    8b08:	15000326 	beq	r2,r20,8b18 <getstr+0x74>
      str[index] = (char)c;
    8b0c:	8c07883a 	add	r3,r17,r16
    8b10:	18800005 	stb	r2,0(r3)
      index++;
    8b14:	84000044 	addi	r16,r16,1
#include "system.h"
#include "uart.h"

int getchar() {
  int c;
  c = alt_getchar();
    8b18:	0008e6c0 	call	8e6c <alt_getchar>
    8b1c:	003fee06 	br	8ad8 <_gp+0xffff76c0>

00008b20 <putstr>:
  str[index] = '\0';
  return;
}

void putstr(const char* str) {
	alt_putstr(str);
    8b20:	00091881 	jmpi	9188 <alt_putstr>

00008b24 <tx_str>:
}

void tx_str(const char* str) {
  alt_putstr(str);
    8b24:	00091881 	jmpi	9188 <alt_putstr>

00008b28 <rx_str>:
}

void rx_str(char* str) {
  getstr(str);
    8b28:	0008aa41 	jmpi	8aa4 <getstr>

00008b2c <hexchar_to_int>:
 *      Author: yoshiaki
 */

#include "hexchar_int.h"

int hexchar_to_int(const char c) {
    8b2c:	213ff404 	addi	r4,r4,-48
    8b30:	21003fcc 	andi	r4,r4,255
    8b34:	00800584 	movi	r2,22
    8b38:	11000536 	bltu	r2,r4,8b50 <hexchar_to_int+0x24>
    8b3c:	00800074 	movhi	r2,1
    8b40:	10a4e684 	addi	r2,r2,-27750
    8b44:	1109883a 	add	r4,r2,r4
    8b48:	20800007 	ldb	r2,0(r4)
    8b4c:	f800283a 	ret
  int value;
  switch (c) {
    8b50:	00bfffc4 	movi	r2,-1
    case 'E': value = 0x0E; break;
    case 'F': value = 0x0F; break;
    default : value = HEX_CONVERTING_ERR; break;
  }
  return value;
}
    8b54:	f800283a 	ret

00008b58 <hex2chars_to_int>:

int hex2chars_to_int(const char c0, const char c1) {
  const int v0 = hexchar_to_int(c0);
    8b58:	21003fcc 	andi	r4,r4,255
    8b5c:	2100201c 	xori	r4,r4,128
    default : value = HEX_CONVERTING_ERR; break;
  }
  return value;
}

int hex2chars_to_int(const char c0, const char c1) {
    8b60:	defffd04 	addi	sp,sp,-12
  const int v0 = hexchar_to_int(c0);
    8b64:	213fe004 	addi	r4,r4,-128
    default : value = HEX_CONVERTING_ERR; break;
  }
  return value;
}

int hex2chars_to_int(const char c0, const char c1) {
    8b68:	dfc00215 	stw	ra,8(sp)
    8b6c:	dc400115 	stw	r17,4(sp)
    8b70:	dc000015 	stw	r16,0(sp)
    8b74:	2823883a 	mov	r17,r5
  const int v0 = hexchar_to_int(c0);
    8b78:	0008b2c0 	call	8b2c <hexchar_to_int>
  const int v1 = hexchar_to_int(c1);
    8b7c:	89003fcc 	andi	r4,r17,255
    8b80:	2100201c 	xori	r4,r4,128
    8b84:	213fe004 	addi	r4,r4,-128
  }
  return value;
}

int hex2chars_to_int(const char c0, const char c1) {
  const int v0 = hexchar_to_int(c0);
    8b88:	1021883a 	mov	r16,r2
  const int v1 = hexchar_to_int(c1);
    8b8c:	0008b2c0 	call	8b2c <hexchar_to_int>
    8b90:	1007883a 	mov	r3,r2

  if (v0 == HEX_CONVERTING_ERR || v1 == HEX_CONVERTING_ERR) {
    8b94:	00bfffc4 	movi	r2,-1
    8b98:	80800426 	beq	r16,r2,8bac <hex2chars_to_int+0x54>
    8b9c:	18800526 	beq	r3,r2,8bb4 <hex2chars_to_int+0x5c>
    return HEX_CONVERTING_ERR;
  }

  return (v0 << 4) + v1;
    8ba0:	8004913a 	slli	r2,r16,4
    8ba4:	10c5883a 	add	r2,r2,r3
    8ba8:	00000306 	br	8bb8 <hex2chars_to_int+0x60>
int hex2chars_to_int(const char c0, const char c1) {
  const int v0 = hexchar_to_int(c0);
  const int v1 = hexchar_to_int(c1);

  if (v0 == HEX_CONVERTING_ERR || v1 == HEX_CONVERTING_ERR) {
    return HEX_CONVERTING_ERR;
    8bac:	8005883a 	mov	r2,r16
    8bb0:	00000106 	br	8bb8 <hex2chars_to_int+0x60>
    8bb4:	1805883a 	mov	r2,r3
  }

  return (v0 << 4) + v1;
}
    8bb8:	dfc00217 	ldw	ra,8(sp)
    8bbc:	dc400117 	ldw	r17,4(sp)
    8bc0:	dc000017 	ldw	r16,0(sp)
    8bc4:	dec00304 	addi	sp,sp,12
    8bc8:	f800283a 	ret

00008bcc <hex4chars_to_int>:

int hex4chars_to_int(const char c0, const char c1, const char c2, const char c3) {
  const int v0 = hex2chars_to_int(c0, c1);
    8bcc:	21003fcc 	andi	r4,r4,255
    8bd0:	29403fcc 	andi	r5,r5,255
    8bd4:	2100201c 	xori	r4,r4,128
    8bd8:	2940201c 	xori	r5,r5,128
  }

  return (v0 << 4) + v1;
}

int hex4chars_to_int(const char c0, const char c1, const char c2, const char c3) {
    8bdc:	defffc04 	addi	sp,sp,-16
  const int v0 = hex2chars_to_int(c0, c1);
    8be0:	213fe004 	addi	r4,r4,-128
    8be4:	297fe004 	addi	r5,r5,-128
  }

  return (v0 << 4) + v1;
}

int hex4chars_to_int(const char c0, const char c1, const char c2, const char c3) {
    8be8:	dfc00315 	stw	ra,12(sp)
    8bec:	dc800215 	stw	r18,8(sp)
    8bf0:	dc400115 	stw	r17,4(sp)
    8bf4:	3025883a 	mov	r18,r6
    8bf8:	3823883a 	mov	r17,r7
    8bfc:	dc000015 	stw	r16,0(sp)
  const int v0 = hex2chars_to_int(c0, c1);
    8c00:	0008b580 	call	8b58 <hex2chars_to_int>
  const int v1 = hex2chars_to_int(c2, c3);
    8c04:	91003fcc 	andi	r4,r18,255
    8c08:	89403fcc 	andi	r5,r17,255
    8c0c:	2100201c 	xori	r4,r4,128
    8c10:	2940201c 	xori	r5,r5,128
    8c14:	213fe004 	addi	r4,r4,-128
    8c18:	297fe004 	addi	r5,r5,-128

  return (v0 << 4) + v1;
}

int hex4chars_to_int(const char c0, const char c1, const char c2, const char c3) {
  const int v0 = hex2chars_to_int(c0, c1);
    8c1c:	1021883a 	mov	r16,r2
  const int v1 = hex2chars_to_int(c2, c3);
    8c20:	0008b580 	call	8b58 <hex2chars_to_int>
    8c24:	1007883a 	mov	r3,r2

  if (v0 == HEX_CONVERTING_ERR || v1 == HEX_CONVERTING_ERR) {
    8c28:	00bfffc4 	movi	r2,-1
    8c2c:	80800426 	beq	r16,r2,8c40 <hex4chars_to_int+0x74>
    8c30:	18800526 	beq	r3,r2,8c48 <hex4chars_to_int+0x7c>
    return HEX_CONVERTING_ERR;
  }

  return (v0 << 8) + v1;
    8c34:	8004923a 	slli	r2,r16,8
    8c38:	10c5883a 	add	r2,r2,r3
    8c3c:	00000306 	br	8c4c <hex4chars_to_int+0x80>
int hex4chars_to_int(const char c0, const char c1, const char c2, const char c3) {
  const int v0 = hex2chars_to_int(c0, c1);
  const int v1 = hex2chars_to_int(c2, c3);

  if (v0 == HEX_CONVERTING_ERR || v1 == HEX_CONVERTING_ERR) {
    return HEX_CONVERTING_ERR;
    8c40:	8005883a 	mov	r2,r16
    8c44:	00000106 	br	8c4c <hex4chars_to_int+0x80>
    8c48:	1805883a 	mov	r2,r3
  }

  return (v0 << 8) + v1;
}
    8c4c:	dfc00317 	ldw	ra,12(sp)
    8c50:	dc800217 	ldw	r18,8(sp)
    8c54:	dc400117 	ldw	r17,4(sp)
    8c58:	dc000017 	ldw	r16,0(sp)
    8c5c:	dec00404 	addi	sp,sp,16
    8c60:	f800283a 	ret

00008c64 <hex_nth_digit>:

char hex_nth_digit(const int number, const int nth) {
  const char nth_digit = (char)((number >> (nth * 4)) & 0xF);
    8c64:	294b883a 	add	r5,r5,r5
    8c68:	294b883a 	add	r5,r5,r5
    8c6c:	2149d83a 	sra	r4,r4,r5
    8c70:	214003cc 	andi	r5,r4,15
    8c74:	01000074 	movhi	r4,1
    8c78:	2124e284 	addi	r4,r4,-27766
    8c7c:	214b883a 	add	r5,r4,r5
    case 0xF: hex = 'F'; break;
    default:  hex = 'x'; break;
  }

  return hex;
}
    8c80:	28800003 	ldbu	r2,0(r5)
    8c84:	f800283a 	ret

00008c88 <bytecount_of_hexformat>:

#include "hexchar_int.h"

#include "hexformat.h"

int bytecount_of_hexformat(const char* hf){
    8c88:	2005883a 	mov	r2,r4
  const int offset = 1;
  return hex2chars_to_int(hf[offset+0], hf[offset+1]);
    8c8c:	11400087 	ldb	r5,2(r2)
    8c90:	21000047 	ldb	r4,1(r4)
    8c94:	0008b581 	jmpi	8b58 <hex2chars_to_int>

00008c98 <address_of_hexformat>:
}
int address_of_hexformat(const char* hf) {
    8c98:	2005883a 	mov	r2,r4
  const int offset = 3;
  return hex4chars_to_int(hf[offset+0], hf[offset+1], hf[offset+2], hf[offset+3]);
    8c9c:	11400107 	ldb	r5,4(r2)
    8ca0:	210000c7 	ldb	r4,3(r4)
    8ca4:	11800147 	ldb	r6,5(r2)
    8ca8:	11c00187 	ldb	r7,6(r2)
    8cac:	0008bcc1 	jmpi	8bcc <hex4chars_to_int>

00008cb0 <recordtype_of_hexformat>:
}

int recordtype_of_hexformat(const char* hf) {
    8cb0:	2005883a 	mov	r2,r4
  const int offset = 7;
  return hex2chars_to_int(hf[offset+0], hf[offset+1]);
    8cb4:	11400207 	ldb	r5,8(r2)
    8cb8:	210001c7 	ldb	r4,7(r4)
    8cbc:	0008b581 	jmpi	8b58 <hex2chars_to_int>

00008cc0 <data_of_hexformat>:
}

int data_of_hexformat(const char* hf, const int n) {
  const int offset = 9 + 8 * n;
    8cc0:	280a90fa 	slli	r5,r5,3
int recordtype_of_hexformat(const char* hf) {
  const int offset = 7;
  return hex2chars_to_int(hf[offset+0], hf[offset+1]);
}

int data_of_hexformat(const char* hf, const int n) {
    8cc4:	defffb04 	addi	sp,sp,-20
    8cc8:	dc000015 	stw	r16,0(sp)
  const int offset = 9 + 8 * n;
    8ccc:	2c000244 	addi	r16,r5,9
  const int d3 = hex2chars_to_int(hf[offset+0], hf[offset+1]);
    8cd0:	2421883a 	add	r16,r4,r16
int recordtype_of_hexformat(const char* hf) {
  const int offset = 7;
  return hex2chars_to_int(hf[offset+0], hf[offset+1]);
}

int data_of_hexformat(const char* hf, const int n) {
    8cd4:	dfc00415 	stw	ra,16(sp)
    8cd8:	dcc00315 	stw	r19,12(sp)
    8cdc:	dc800215 	stw	r18,8(sp)
    8ce0:	dc400115 	stw	r17,4(sp)
  const int offset = 9 + 8 * n;
  const int d3 = hex2chars_to_int(hf[offset+0], hf[offset+1]);
    8ce4:	81000007 	ldb	r4,0(r16)
    8ce8:	81400047 	ldb	r5,1(r16)
    8cec:	0008b580 	call	8b58 <hex2chars_to_int>
  const int d2 = hex2chars_to_int(hf[offset+2], hf[offset+3]);
    8cf0:	81000087 	ldb	r4,2(r16)
    8cf4:	814000c7 	ldb	r5,3(r16)
  return hex2chars_to_int(hf[offset+0], hf[offset+1]);
}

int data_of_hexformat(const char* hf, const int n) {
  const int offset = 9 + 8 * n;
  const int d3 = hex2chars_to_int(hf[offset+0], hf[offset+1]);
    8cf8:	1027883a 	mov	r19,r2
  const int d2 = hex2chars_to_int(hf[offset+2], hf[offset+3]);
  const int d1 = hex2chars_to_int(hf[offset+4], hf[offset+5]);
  const int d0 = hex2chars_to_int(hf[offset+6], hf[offset+7]);
  return (d3 << 24) + (d2 << 16) + (d1 << 8) + d0;
    8cfc:	9826963a 	slli	r19,r19,24
}

int data_of_hexformat(const char* hf, const int n) {
  const int offset = 9 + 8 * n;
  const int d3 = hex2chars_to_int(hf[offset+0], hf[offset+1]);
  const int d2 = hex2chars_to_int(hf[offset+2], hf[offset+3]);
    8d00:	0008b580 	call	8b58 <hex2chars_to_int>
  const int d1 = hex2chars_to_int(hf[offset+4], hf[offset+5]);
    8d04:	81000107 	ldb	r4,4(r16)
    8d08:	81400147 	ldb	r5,5(r16)
}

int data_of_hexformat(const char* hf, const int n) {
  const int offset = 9 + 8 * n;
  const int d3 = hex2chars_to_int(hf[offset+0], hf[offset+1]);
  const int d2 = hex2chars_to_int(hf[offset+2], hf[offset+3]);
    8d0c:	1025883a 	mov	r18,r2
  const int d1 = hex2chars_to_int(hf[offset+4], hf[offset+5]);
  const int d0 = hex2chars_to_int(hf[offset+6], hf[offset+7]);
  return (d3 << 24) + (d2 << 16) + (d1 << 8) + d0;
    8d10:	9024943a 	slli	r18,r18,16

int data_of_hexformat(const char* hf, const int n) {
  const int offset = 9 + 8 * n;
  const int d3 = hex2chars_to_int(hf[offset+0], hf[offset+1]);
  const int d2 = hex2chars_to_int(hf[offset+2], hf[offset+3]);
  const int d1 = hex2chars_to_int(hf[offset+4], hf[offset+5]);
    8d14:	0008b580 	call	8b58 <hex2chars_to_int>
    8d18:	1023883a 	mov	r17,r2
  const int d0 = hex2chars_to_int(hf[offset+6], hf[offset+7]);
    8d1c:	81000187 	ldb	r4,6(r16)
    8d20:	814001c7 	ldb	r5,7(r16)
  return (d3 << 24) + (d2 << 16) + (d1 << 8) + d0;
    8d24:	8822923a 	slli	r17,r17,8
    8d28:	9ca5883a 	add	r18,r19,r18
int data_of_hexformat(const char* hf, const int n) {
  const int offset = 9 + 8 * n;
  const int d3 = hex2chars_to_int(hf[offset+0], hf[offset+1]);
  const int d2 = hex2chars_to_int(hf[offset+2], hf[offset+3]);
  const int d1 = hex2chars_to_int(hf[offset+4], hf[offset+5]);
  const int d0 = hex2chars_to_int(hf[offset+6], hf[offset+7]);
    8d2c:	0008b580 	call	8b58 <hex2chars_to_int>
  return (d3 << 24) + (d2 << 16) + (d1 << 8) + d0;
    8d30:	9463883a 	add	r17,r18,r17
}
    8d34:	8885883a 	add	r2,r17,r2
    8d38:	dfc00417 	ldw	ra,16(sp)
    8d3c:	dcc00317 	ldw	r19,12(sp)
    8d40:	dc800217 	ldw	r18,8(sp)
    8d44:	dc400117 	ldw	r17,4(sp)
    8d48:	dc000017 	ldw	r16,0(sp)
    8d4c:	dec00504 	addi	sp,sp,20
    8d50:	f800283a 	ret

00008d54 <checksum_of_hexformat>:

char checksum_of_hexformat(const char* hf) {
    8d54:	defffe04 	addi	sp,sp,-8
    8d58:	dfc00115 	stw	ra,4(sp)
    8d5c:	dc000015 	stw	r16,0(sp)
    8d60:	2021883a 	mov	r16,r4
  const int offset = 9 + 2 * bytecount_of_hexformat(hf);
    8d64:	0008c880 	call	8c88 <bytecount_of_hexformat>
    8d68:	1085883a 	add	r2,r2,r2
    8d6c:	10800244 	addi	r2,r2,9
  return (char)(hex2chars_to_int(hf[offset+0], hf[offset+1]));
    8d70:	8085883a 	add	r2,r16,r2
    8d74:	11000007 	ldb	r4,0(r2)
    8d78:	11400047 	ldb	r5,1(r2)
    8d7c:	0008b580 	call	8b58 <hex2chars_to_int>
}
    8d80:	dfc00117 	ldw	ra,4(sp)
    8d84:	dc000017 	ldw	r16,0(sp)
    8d88:	dec00204 	addi	sp,sp,8
    8d8c:	f800283a 	ret

00008d90 <monitor_command>:
    return MONITOR_COMMAND_ERR;
  }
}

int unique(const char c0, const char c1) {
  return (c0 << 8) + c1;
    8d90:	20800007 	ldb	r2,0(r4)
    8d94:	1006923a 	slli	r3,r2,8
    8d98:	20800047 	ldb	r2,1(r4)
    8d9c:	1885883a 	add	r2,r3,r2
  const int WD = unique('W','D');
  const int IP = unique('I','P');
  const int OP = unique('O','P');
  //
  const int command = unique(str[0], str[1]);
  if (command == AR) {
    8da0:	00d05484 	movi	r3,16722
    8da4:	10c01426 	beq	r2,r3,8df8 <monitor_command+0x68>
    return MONITOR_COMMAND_AR;
  } else if (command == NR) {
    8da8:	00d39484 	movi	r3,20050
    8dac:	10c01426 	beq	r2,r3,8e00 <monitor_command+0x70>
    return MONITOR_COMMAND_NR;
  } else if (command == AP) {
    8db0:	00d05404 	movi	r3,16720
    8db4:	10c01426 	beq	r2,r3,8e08 <monitor_command+0x78>
    return MONITOR_COMMAND_AP;
  } else if (command == NP) {
    8db8:	00d39404 	movi	r3,20048
    8dbc:	10c01426 	beq	r2,r3,8e10 <monitor_command+0x80>
    return MONITOR_COMMAND_NP;
  } else if (command == RI) {
    8dc0:	00d49244 	movi	r3,21065
    8dc4:	10c01426 	beq	r2,r3,8e18 <monitor_command+0x88>
    return MONITOR_COMMAND_RI;
  } else if (command == WI) {
    8dc8:	00d5d244 	movi	r3,22345
    8dcc:	10c01426 	beq	r2,r3,8e20 <monitor_command+0x90>
    return MONITOR_COMMAND_WI;
  } else if (command == RD) {
    8dd0:	00d49104 	movi	r3,21060
    8dd4:	10c01426 	beq	r2,r3,8e28 <monitor_command+0x98>
    return MONITOR_COMMAND_RD;
  } else if (command == WD) {
    8dd8:	00d5d104 	movi	r3,22340
    8ddc:	10c01426 	beq	r2,r3,8e30 <monitor_command+0xa0>
    return MONITOR_COMMAND_WD;
  } else if (command == IP) {
    8de0:	00d25404 	movi	r3,18768
    8de4:	10c01426 	beq	r2,r3,8e38 <monitor_command+0xa8>
    return MONITOR_COMMAND_IP;
  } else if (command == OP) {
    8de8:	00d3d404 	movi	r3,20304
    8dec:	10c01426 	beq	r2,r3,8e40 <monitor_command+0xb0>
    return MONITOR_COMMAND_OP;
  } else {
    return MONITOR_COMMAND_ERR;
    8df0:	00bfffc4 	movi	r2,-1
    8df4:	f800283a 	ret
  const int IP = unique('I','P');
  const int OP = unique('O','P');
  //
  const int command = unique(str[0], str[1]);
  if (command == AR) {
    return MONITOR_COMMAND_AR;
    8df8:	00800044 	movi	r2,1
    8dfc:	f800283a 	ret
  } else if (command == NR) {
    return MONITOR_COMMAND_NR;
    8e00:	00800084 	movi	r2,2
    8e04:	f800283a 	ret
  } else if (command == AP) {
    return MONITOR_COMMAND_AP;
    8e08:	008000c4 	movi	r2,3
    8e0c:	f800283a 	ret
  } else if (command == NP) {
    return MONITOR_COMMAND_NP;
    8e10:	00800104 	movi	r2,4
    8e14:	f800283a 	ret
  } else if (command == RI) {
    return MONITOR_COMMAND_RI;
    8e18:	00800144 	movi	r2,5
    8e1c:	f800283a 	ret
  } else if (command == WI) {
    return MONITOR_COMMAND_WI;
    8e20:	00800184 	movi	r2,6
    8e24:	f800283a 	ret
  } else if (command == RD) {
    return MONITOR_COMMAND_RD;
    8e28:	008001c4 	movi	r2,7
    8e2c:	f800283a 	ret
  } else if (command == WD) {
    return MONITOR_COMMAND_WD;
    8e30:	00800204 	movi	r2,8
    8e34:	f800283a 	ret
  } else if (command == IP) {
    return MONITOR_COMMAND_IP;
    8e38:	00800244 	movi	r2,9
    8e3c:	f800283a 	ret
  } else if (command == OP) {
    return MONITOR_COMMAND_OP;
    8e40:	00800284 	movi	r2,10
  } else {
    return MONITOR_COMMAND_ERR;
  }
}
    8e44:	f800283a 	ret

00008e48 <unique>:

int unique(const char c0, const char c1) {
  return (c0 << 8) + c1;
    8e48:	21003fcc 	andi	r4,r4,255
    8e4c:	2100201c 	xori	r4,r4,128
    8e50:	213fe004 	addi	r4,r4,-128
    8e54:	2008923a 	slli	r4,r4,8
    8e58:	28803fcc 	andi	r2,r5,255
    8e5c:	1080201c 	xori	r2,r2,128
    8e60:	10bfe004 	addi	r2,r2,-128
}
    8e64:	2085883a 	add	r2,r4,r2
    8e68:	f800283a 	ret

00008e6c <alt_getchar>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    8e6c:	00800074 	movhi	r2,1
    8e70:	10a4f004 	addi	r2,r2,-27712
    8e74:	11c00217 	ldw	r7,8(r2)
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
    8e78:	defffe04 	addi	sp,sp,-8
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    8e7c:	01000074 	movhi	r4,1
    8e80:	21250704 	addi	r4,r4,-27620
    8e84:	d80b883a 	mov	r5,sp
    8e88:	01800044 	movi	r6,1
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
    8e8c:	dfc00115 	stw	ra,4(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    8e90:	00091e40 	call	91e4 <altera_avalon_uart_read>
    8e94:	0080020e 	bge	zero,r2,8ea0 <alt_getchar+0x34>
        return -1;
    }
    return c;
    8e98:	d8800007 	ldb	r2,0(sp)
    8e9c:	00000106 	br	8ea4 <alt_getchar+0x38>
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
    8ea0:	00bfffc4 	movi	r2,-1
    return c;
#else
    return getchar();
#endif
#endif
}
    8ea4:	dfc00117 	ldw	ra,4(sp)
    8ea8:	dec00204 	addi	sp,sp,8
    8eac:	f800283a 	ret

00008eb0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8eb0:	deffff04 	addi	sp,sp,-4
    8eb4:	01000074 	movhi	r4,1
    8eb8:	01400074 	movhi	r5,1
    8ebc:	dfc00015 	stw	ra,0(sp)
    8ec0:	2124f004 	addi	r4,r4,-27712
    8ec4:	29650f04 	addi	r5,r5,-27588

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8ec8:	2140061e 	bne	r4,r5,8ee4 <alt_load+0x34>
    8ecc:	01000074 	movhi	r4,1
    8ed0:	01400074 	movhi	r5,1
    8ed4:	21200804 	addi	r4,r4,-32736
    8ed8:	29600804 	addi	r5,r5,-32736
    8edc:	2140141e 	bne	r4,r5,8f30 <alt_load+0x80>
    8ee0:	00000d06 	br	8f18 <alt_load+0x68>
    8ee4:	00c00074 	movhi	r3,1
    8ee8:	18e50f04 	addi	r3,r3,-27588
    8eec:	00bfff04 	movi	r2,-4
    8ef0:	1907c83a 	sub	r3,r3,r4
    8ef4:	1886703a 	and	r3,r3,r2
    8ef8:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8efc:	10fff326 	beq	r2,r3,8ecc <_gp+0xffff7ab4>
    8f00:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
    8f04:	39c00017 	ldw	r7,0(r7)
    8f08:	110d883a 	add	r6,r2,r4
    8f0c:	10800104 	addi	r2,r2,4
    8f10:	31c00015 	stw	r7,0(r6)
    8f14:	003ff906 	br	8efc <_gp+0xffff7ae4>
    8f18:	01000074 	movhi	r4,1
    8f1c:	01400074 	movhi	r5,1
    8f20:	2124cd04 	addi	r4,r4,-27852
    8f24:	2964cd04 	addi	r5,r5,-27852

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8f28:	2140121e 	bne	r4,r5,8f74 <alt_load+0xc4>
    8f2c:	00000d06 	br	8f64 <alt_load+0xb4>
    8f30:	00c00074 	movhi	r3,1
    8f34:	18e00804 	addi	r3,r3,-32736
    8f38:	00bfff04 	movi	r2,-4
    8f3c:	1907c83a 	sub	r3,r3,r4
    8f40:	1886703a 	and	r3,r3,r2
    8f44:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8f48:	10fff326 	beq	r2,r3,8f18 <_gp+0xffff7b00>
    8f4c:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
    8f50:	39c00017 	ldw	r7,0(r7)
    8f54:	110d883a 	add	r6,r2,r4
    8f58:	10800104 	addi	r2,r2,4
    8f5c:	31c00015 	stw	r7,0(r6)
    8f60:	003ff906 	br	8f48 <_gp+0xffff7b30>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8f64:	00093000 	call	9300 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    8f68:	dfc00017 	ldw	ra,0(sp)
    8f6c:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    8f70:	000930c1 	jmpi	930c <alt_icache_flush_all>
    8f74:	00c00074 	movhi	r3,1
    8f78:	18e4f004 	addi	r3,r3,-27712
    8f7c:	00bfff04 	movi	r2,-4
    8f80:	1907c83a 	sub	r3,r3,r4
    8f84:	1886703a 	and	r3,r3,r2

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8f88:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8f8c:	10fff526 	beq	r2,r3,8f64 <_gp+0xffff7b4c>
    8f90:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
    8f94:	39c00017 	ldw	r7,0(r7)
    8f98:	110d883a 	add	r6,r2,r4
    8f9c:	10800104 	addi	r2,r2,4
    8fa0:	31c00015 	stw	r7,0(r6)
    8fa4:	003ff906 	br	8f8c <_gp+0xffff7b74>

00008fa8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8fa8:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8fac:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8fb0:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8fb4:	00091c00 	call	91c0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8fb8:	00091e00 	call	91e0 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8fbc:	d1202a17 	ldw	r4,-32600(gp)
    8fc0:	d1602917 	ldw	r5,-32604(gp)
    8fc4:	d1a02817 	ldw	r6,-32608(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    8fc8:	dfc00017 	ldw	ra,0(sp)
    8fcc:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8fd0:	00082a01 	jmpi	82a0 <main>

00008fd4 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    8fd4:	defff204 	addi	sp,sp,-56
    8fd8:	dfc00a15 	stw	ra,40(sp)
    8fdc:	df000915 	stw	fp,36(sp)
    8fe0:	ddc00815 	stw	r23,32(sp)
    8fe4:	dd800715 	stw	r22,28(sp)
    8fe8:	dd400615 	stw	r21,24(sp)
    8fec:	dd000515 	stw	r20,20(sp)
    8ff0:	dcc00415 	stw	r19,16(sp)
    8ff4:	dc800315 	stw	r18,12(sp)
    8ff8:	dc400215 	stw	r17,8(sp)
    8ffc:	dc000115 	stw	r16,4(sp)
    9000:	d9400b15 	stw	r5,44(sp)
    9004:	d9800c15 	stw	r6,48(sp)
    9008:	d9c00d15 	stw	r7,52(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    900c:	04000944 	movi	r16,37
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    9010:	2005883a 	mov	r2,r4
	va_list args;
	va_start(args, fmt);
    9014:	dd400b04 	addi	r21,sp,44
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
    9018:	048018c4 	movi	r18,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
    901c:	04c01e04 	movi	r19,120
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    9020:	05001cc4 	movi	r20,115
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    9024:	11000007 	ldb	r4,0(r2)
    9028:	20003926 	beq	r4,zero,9110 <alt_printf+0x13c>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    902c:	24000226 	beq	r4,r16,9038 <alt_printf+0x64>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    9030:	14400044 	addi	r17,r2,1
    9034:	00001106 	br	907c <alt_printf+0xa8>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    9038:	14400084 	addi	r17,r2,2
    903c:	10800047 	ldb	r2,1(r2)
    9040:	10003326 	beq	r2,zero,9110 <alt_printf+0x13c>
            {
                if (c == '%')
    9044:	1400021e 	bne	r2,r16,9050 <alt_printf+0x7c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
    9048:	8009883a 	mov	r4,r16
    904c:	00000b06 	br	907c <alt_printf+0xa8>
                } 
                else if (c == 'c')
    9050:	1480051e 	bne	r2,r18,9068 <alt_printf+0x94>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
    9054:	a9000017 	ldw	r4,0(r21)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
    9058:	ad800104 	addi	r22,r21,4
    905c:	b02b883a 	mov	r21,r22
                    alt_putchar(v);
    9060:	00091400 	call	9140 <alt_putchar>
    9064:	00002806 	br	9108 <alt_printf+0x134>
                }
                else if (c == 'x')
    9068:	14c01f1e 	bne	r2,r19,90e8 <alt_printf+0x114>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    906c:	adc00017 	ldw	r23,0(r21)
    9070:	ad400104 	addi	r21,r21,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    9074:	b800031e 	bne	r23,zero,9084 <alt_printf+0xb0>
                    {
                        alt_putchar('0');
    9078:	01000c04 	movi	r4,48
    907c:	00091400 	call	9140 <alt_putchar>
                        continue;
    9080:	00002106 	br	9108 <alt_printf+0x134>
    9084:	05800704 	movi	r22,28
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    9088:	00c003c4 	movi	r3,15
    908c:	1d84983a 	sll	r2,r3,r22
    9090:	15c4703a 	and	r2,r2,r23
    9094:	1000021e 	bne	r2,zero,90a0 <alt_printf+0xcc>
                        digit_shift -= 4;
    9098:	b5bfff04 	addi	r22,r22,-4
    909c:	003ffb06 	br	908c <_gp+0xffff7c74>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    90a0:	070003c4 	movi	fp,15
                        if (digit <= 9)
    90a4:	00c00244 	movi	r3,9
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    90a8:	b0001716 	blt	r22,zero,9108 <alt_printf+0x134>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    90ac:	e584983a 	sll	r2,fp,r22
    90b0:	15c4703a 	and	r2,r2,r23
    90b4:	1584d83a 	srl	r2,r2,r22
                        if (digit <= 9)
    90b8:	18800236 	bltu	r3,r2,90c4 <alt_printf+0xf0>
                            c = '0' + digit;
    90bc:	11000c04 	addi	r4,r2,48
    90c0:	00000106 	br	90c8 <alt_printf+0xf4>
                        else
                            c = 'a' + digit - 10;
    90c4:	110015c4 	addi	r4,r2,87
                        alt_putchar(c);
    90c8:	21003fcc 	andi	r4,r4,255
    90cc:	2100201c 	xori	r4,r4,128
    90d0:	213fe004 	addi	r4,r4,-128
    90d4:	d8c00015 	stw	r3,0(sp)
    90d8:	00091400 	call	9140 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    90dc:	b5bfff04 	addi	r22,r22,-4
    90e0:	d8c00017 	ldw	r3,0(sp)
    90e4:	003ff006 	br	90a8 <_gp+0xffff7c90>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    90e8:	1500071e 	bne	r2,r20,9108 <alt_printf+0x134>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    90ec:	ad800017 	ldw	r22,0(r21)
    90f0:	ad400104 	addi	r21,r21,4

                    while(*s)
    90f4:	b1000007 	ldb	r4,0(r22)
    90f8:	20000326 	beq	r4,zero,9108 <alt_printf+0x134>
                      alt_putchar(*s++);
    90fc:	b5800044 	addi	r22,r22,1
    9100:	00091400 	call	9140 <alt_putchar>
    9104:	003ffb06 	br	90f4 <_gp+0xffff7cdc>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
    9108:	8805883a 	mov	r2,r17
    910c:	003fc506 	br	9024 <_gp+0xffff7c0c>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
    9110:	dfc00a17 	ldw	ra,40(sp)
    9114:	df000917 	ldw	fp,36(sp)
    9118:	ddc00817 	ldw	r23,32(sp)
    911c:	dd800717 	ldw	r22,28(sp)
    9120:	dd400617 	ldw	r21,24(sp)
    9124:	dd000517 	ldw	r20,20(sp)
    9128:	dcc00417 	ldw	r19,16(sp)
    912c:	dc800317 	ldw	r18,12(sp)
    9130:	dc400217 	ldw	r17,8(sp)
    9134:	dc000117 	ldw	r16,4(sp)
    9138:	dec00e04 	addi	sp,sp,56
    913c:	f800283a 	ret

00009140 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    9140:	defffd04 	addi	sp,sp,-12
    9144:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
    9148:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    914c:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    9150:	01000074 	movhi	r4,1
    9154:	21250704 	addi	r4,r4,-27620
    9158:	d80b883a 	mov	r5,sp
    915c:	01800044 	movi	r6,1
    9160:	000f883a 	mov	r7,zero
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    9164:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    9168:	00092700 	call	9270 <altera_avalon_uart_write>
    916c:	00ffffc4 	movi	r3,-1
    9170:	10c00126 	beq	r2,r3,9178 <alt_putchar+0x38>
        return -1;
    }
    return c;
    9174:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
    9178:	dfc00217 	ldw	ra,8(sp)
    917c:	dc000117 	ldw	r16,4(sp)
    9180:	dec00304 	addi	sp,sp,12
    9184:	f800283a 	ret

00009188 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    9188:	defffe04 	addi	sp,sp,-8
    918c:	dc000015 	stw	r16,0(sp)
    9190:	dfc00115 	stw	ra,4(sp)
    9194:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    9198:	00093180 	call	9318 <strlen>
    919c:	01000074 	movhi	r4,1
    91a0:	21250704 	addi	r4,r4,-27620
    91a4:	800b883a 	mov	r5,r16
    91a8:	100d883a 	mov	r6,r2
    91ac:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
#endif
}
    91b0:	dfc00117 	ldw	ra,4(sp)
    91b4:	dc000017 	ldw	r16,0(sp)
    91b8:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    91bc:	00092701 	jmpi	9270 <altera_avalon_uart_write>

000091c0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    91c0:	deffff04 	addi	sp,sp,-4
    91c4:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_PROCESSOR, nios2_processor);
    91c8:	00093100 	call	9310 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    91cc:	00800044 	movi	r2,1
    91d0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    91d4:	dfc00017 	ldw	ra,0(sp)
    91d8:	dec00104 	addi	sp,sp,4
    91dc:	f800283a 	ret

000091e0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    91e0:	f800283a 	ret

000091e4 <altera_avalon_uart_read>:
  int flags)
{
  int block;
  unsigned int status;

  block = !(flags & O_NONBLOCK);
    91e4:	39d0000c 	andi	r7,r7,16384

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
    91e8:	20c00017 	ldw	r3,0(r4)
    91ec:	18c00204 	addi	r3,r3,8
    91f0:	18800037 	ldwio	r2,0(r3)

    /* clear any error flags */

    IOWR_ALTERA_AVALON_UART_STATUS(sp->base, 0);
    91f4:	18000035 	stwio	zero,0(r3)

    if (status & ALTERA_AVALON_UART_CONTROL_RRDY_MSK)
    91f8:	10c0200c 	andi	r3,r2,128
    91fc:	1800021e 	bne	r3,zero,9208 <altera_avalon_uart_read+0x24>
      {
        return 1;
      }
    }
  }
  while (block);
    9200:	383ff926 	beq	r7,zero,91e8 <_gp+0xffff7dd0>
    9204:	00000706 	br	9224 <altera_avalon_uart_read+0x40>

    IOWR_ALTERA_AVALON_UART_STATUS(sp->base, 0);

    if (status & ALTERA_AVALON_UART_CONTROL_RRDY_MSK)
    {
      ptr[0] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
    9208:	20c00017 	ldw	r3,0(r4)
    920c:	18c00037 	ldwio	r3,0(r3)
    9210:	28c00005 	stb	r3,0(r5)

      if (!(status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
    9214:	108000cc 	andi	r2,r2,3
    9218:	103ff91e 	bne	r2,zero,9200 <_gp+0xffff7de8>
      ALTERA_AVALON_UART_STATUS_FE_MSK)))
      {
        return 1;
    921c:	00800044 	movi	r2,1
    9220:	f800283a 	ret

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    9224:	00800074 	movhi	r2,1
    9228:	10a50e04 	addi	r2,r2,-27592
    922c:	10800017 	ldw	r2,0(r2)
    9230:	10000926 	beq	r2,zero,9258 <altera_avalon_uart_read+0x74>
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
    9234:	deffff04 	addi	sp,sp,-4
    9238:	dfc00015 	stw	ra,0(sp)
    923c:	103ee83a 	callr	r2
      }
    }
  }
  while (block);

  ALT_ERRNO = EWOULDBLOCK;
    9240:	00c002c4 	movi	r3,11
    9244:	10c00015 	stw	r3,0(r2)
 
  return 0;
    9248:	0005883a 	mov	r2,zero
}
    924c:	dfc00017 	ldw	ra,0(sp)
    9250:	dec00104 	addi	sp,sp,4
    9254:	f800283a 	ret
    9258:	00800074 	movhi	r2,1
    925c:	10a53104 	addi	r2,r2,-27452
      }
    }
  }
  while (block);

  ALT_ERRNO = EWOULDBLOCK;
    9260:	00c002c4 	movi	r3,11
    9264:	10c00015 	stw	r3,0(r2)
 
  return 0;
    9268:	0005883a 	mov	r2,zero
}
    926c:	f800283a 	ret

00009270 <altera_avalon_uart_write>:
 */

int 
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
    9270:	defffd04 	addi	sp,sp,-12
    9274:	dc400115 	stw	r17,4(sp)
    9278:	dc000015 	stw	r16,0(sp)
    927c:	dfc00215 	stw	ra,8(sp)
    9280:	3023883a 	mov	r17,r6
  int block;
  unsigned int status;
  int count;

  block = !(flags & O_NONBLOCK);
    9284:	39d0000c 	andi	r7,r7,16384
  count = len;
    9288:	3021883a 	mov	r16,r6

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
    928c:	20800017 	ldw	r2,0(r4)
    9290:	10c00237 	ldwio	r3,8(r2)
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
    9294:	18c0100c 	andi	r3,r3,64
    9298:	18000526 	beq	r3,zero,92b0 <altera_avalon_uart_write+0x40>
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
    929c:	28c00044 	addi	r3,r5,1
    92a0:	29400007 	ldb	r5,0(r5)
    92a4:	11400135 	stwio	r5,4(r2)
      count--;
    92a8:	843fffc4 	addi	r16,r16,-1
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
    92ac:	180b883a 	mov	r5,r3
      count--;
    }
  }
  while (block && count);
    92b0:	3800021e 	bne	r7,zero,92bc <altera_avalon_uart_write+0x4c>
    92b4:	803ff51e 	bne	r16,zero,928c <_gp+0xffff7e74>
    92b8:	00000b06 	br	92e8 <altera_avalon_uart_write+0x78>

  if (count)
    92bc:	80000a26 	beq	r16,zero,92e8 <altera_avalon_uart_write+0x78>
    92c0:	00800074 	movhi	r2,1
    92c4:	10a50e04 	addi	r2,r2,-27592
    92c8:	10800017 	ldw	r2,0(r2)
    92cc:	10000226 	beq	r2,zero,92d8 <altera_avalon_uart_write+0x68>
    92d0:	103ee83a 	callr	r2
    92d4:	00000206 	br	92e0 <altera_avalon_uart_write+0x70>
    92d8:	00800074 	movhi	r2,1
    92dc:	10a53104 	addi	r2,r2,-27452
  {
    ALT_ERRNO = EWOULDBLOCK;
    92e0:	00c002c4 	movi	r3,11
    92e4:	10c00015 	stw	r3,0(r2)
  }

  return (len - count);
}
    92e8:	8c05c83a 	sub	r2,r17,r16
    92ec:	dfc00217 	ldw	ra,8(sp)
    92f0:	dc400117 	ldw	r17,4(sp)
    92f4:	dc000017 	ldw	r16,0(sp)
    92f8:	dec00304 	addi	sp,sp,12
    92fc:	f800283a 	ret

00009300 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    9300:	f800283a 	ret

00009304 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    9304:	3005883a 	mov	r2,r6
    9308:	f800283a 	ret

0000930c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    930c:	f800283a 	ret

00009310 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    9310:	000170fa 	wrctl	ienable,zero
    9314:	f800283a 	ret

00009318 <strlen>:
    9318:	2005883a 	mov	r2,r4
    931c:	10c00007 	ldb	r3,0(r2)
    9320:	18000226 	beq	r3,zero,932c <strlen+0x14>
    9324:	10800044 	addi	r2,r2,1
    9328:	003ffc06 	br	931c <_gp+0xffff7f04>
    932c:	1105c83a 	sub	r2,r2,r4
    9330:	f800283a 	ret
